<div style="display:none"><math>

  \newcommand{\ordinarycolon}{:}
  \newcommand{\vcentcolon}{\mathrel{\mathop\ordinarycolon}}
  \newcommand{\coloneqq}{\vcentcolon\mathrel{\mkern-1.2mu}=}

  \newcommand{\p}{\psi}
  \newcommand{\w}{\omega}
  \newcommand{\W}{\Omega}
  \newcommand{\pw}{{\p _ \W}}

</math></div>

Bachmann ψ (recast) は Bachmann ψ として考案された順序数を Rathjen が再構成したものである。そもそも Bachmann ψ は史上初の順序数崩壊関数であったが、その定義は全ての極限順序数の基本列が必要になるなど計算が面倒なものであった。それを Rathjen が再構成 (recast) して計算が簡便になっている。<ref>GWiki 2019 § 3.1</ref>

限界は[[バッハマン・ハワード順序数]] (Bachmann–Howard ordinal) である<ref> GWiki 2019 § 5</ref>。そも、名前が同じ人に由来しているので、逆に限界という意味で順序数の名前がこうなったのかもしれない。

== 定義 ==

定義は次のようになる<ref>GWiki 2019 § 3.1</ref>。ここで <math> \W </math> はある一つの不可算基数、例えば最小の不可算順序数 (aleph one) である。

<math>
  \begin{eqnarray*}
    C ^ \W ( \alpha, \beta ) & \coloneqq & \mathrm{closure} ( \{ +, \xi \mapsto \w ^ \xi, \xi _ { < \alpha } \mapsto \pw ( \xi ) \} ) ( \beta \cup \{ 0, \W \} ) \\
    \pw ( \alpha ) & \coloneqq & \min \{ \rho < \W : C ^ \W ( \alpha, \rho ) \cap \W = \rho \} \\
  \end{eqnarray*}
</math>

ただし <math> \mathrm{closure} ( S ) ( \alpha ) </math> は、関数群 <math> S </math> に対する <math> \alpha </math> の閉包である。

== 計算 ==

<math> \pw ( 0 ) </math> を計算する。まずは <math> C ^ \W ( 0, 0 ) = \{ 0, 1, 2, \w, \w ^ \w, \w ^ { \w ^ \w + \w }, \W, \W + 1, \W + \w, \w ^ { \W + 1 }, \w ^ { \W + \W }, \w ^ { \w ^ { \W + \W } }, \ldots \} </math> である。さらに <math> C ^ \W ( 0, \beta ) </math> は <math> \beta < \varepsilon _ 0 </math> のとき <math> C ^ \W ( 0, 0 ) </math> と等しい。加えて <math> C ^ \W ( 0, \varepsilon _ 0 ) </math> のときも等しい。

よって <math> C ^ \W ( 0, 0 ) \cap \W = \varepsilon _ 0 </math> であることから <math> C ^ \W ( 0, \varepsilon _ 0 ) \cap \W = \varepsilon _ 0 </math> である。自明に <math> \varepsilon _ 0 </math> は <math> C ^ \W ( \alpha, \rho ) \cap \W = \rho </math> を満たす最小の順序数である。

ゆえに <math> \pw ( 0 ) = \varepsilon _ 0 </math> である。

<math> \pw ( 1 ) </math> を計算する。ここでは <math> \xi _ { < \alpha } \mapsto \pw ( \xi ) </math> が <math> \xi _ { < 1 } \mapsto \pw ( \xi ) </math> となって <math> \pw ( 0 ) = \varepsilon _ 0 </math> が <math> C ^ ( 1, \beta ) </math> に含まれるようになる。

よって <math> C ^ \W ( 1, 0 ) = C ^ \W ( 1, 1 ) = \cdots = C ^ \W ( 1, \varepsilon _ 1 ) = \varepsilon _ 1 </math> になる。ゆえに <math> \pw ( 1 ) = \varepsilon _ 1 </math> である。

<math> \pw ( \w ) </math> を計算する。まず <math> C ^ \W ( \w, 0 ) = \{ 0, 1, \w, \w ^ 2, \w ^ \w, \varepsilon _ 0, \varepsilon _ 1, \ldots \} </math> であり <math> C ^ \W ( \w, 0 ) \cup \W = \varepsilon _ \w </math> である。ゆえに <math> \pw ( \w ) = \varepsilon _ \w </math> である。

<math> \pw ( \pw ( 0 ) ) = \pw ( \varepsilon _ 0 ) </math> を計算する。 <math> C ^ \W ( \varepsilon _ 0, 0 ) = \{ \varepsilon _ 0, \varepsilon _ 1, \varepsilon _ \w \ldots \} </math> であり <math> C ^ \W ( \varepsilon _ 0, 0 ) \cup \W = \varepsilon _ { \varepsilon _ 0 } </math> である。ゆえに <math> \pw ( \w ) = \varepsilon _ \w </math> である。

このように積み重ねると <math> 0, \pw ( 0 ), \pw ( \pw ( 0 ) ), \ldots \Longrightarrow \zeta _ 0 </math> に達する。

<math> \pw ( \zeta _ 0 ) </math> を計算する。 <math> C ^ \W ( \varepsilon _ 0, 0 ) = \{ \varepsilon _ 0, \varepsilon _ { \varepsilon _ 0 }, \varepsilon _ { \varepsilon _ { \varepsilon _ 0 } } \ldots \} </math> であるゆえに <math> \pw ( \zeta _ 0 ) = \zeta _ 0 </math> である。

<math> \pw ( \W ) </math> を計算する。このとき <math> \xi _ { < \W } \mapsto \pw ( \xi ) </math> であるため <math> \alpha < \zeta _ 0 </math> では許されなかった <math> \pw </math> の無制限のネストが許される。よって <math> \zeta _ 0 </math> と同じような状態になり、ゆえに <math> \pw ( \W ) = \zeta _ 0 </math> である。

<math> \pw ( \W + 1, 0 ) </math> を計算する。このとき <math> \xi _ { < \W + 1 } \mapsto \pw ( \xi ) </math> であるため <math> C ^ \W ( \W + 1, 0 ) </math> に <math> \pw ( \W ) </math> が'''含まれる'''。ゆえに <math> \pw ( \W + 1 ) = \varepsilon _ { \zeta _ 0 + 1 } </math> である。そのまま増やした <math> \zeta _ 0, \zeta _ 0 + 1, \zeta _ 0 + 2, \ldots </math> では含まれず、そのせいで <math> \pw ( \zeta _ 0 + 1 ) = \zeta _ 0 </math> になる。

このまま計算を続けていくと以下のようになる。これは Madore ψ に一致している。

<math>
  \begin{eqnarray*}
    \pw ( 0 ) & = & \varepsilon _ 0 \\
    \pw ( 1 ) & = & \varepsilon _ 1 \\
    \pw ( \w ) & = & \varepsilon _ \w \\
    \pw ( \pw ( 0 ) ) & = & \varepsilon _ { \varepsilon _ 0 } \\
    \pw ( \zeta _ 0 ) & = & \zeta _ 0 \\
    \pw ( \W ) & = & \zeta _ 0 \\
    \pw ( \W + 1 ) & = & \varepsilon _ { \zeta _ 0 + 1 } \\
    \pw ( \W + \w ) & = & \varepsilon _ { \zeta _ 0 + \w } \\
    \pw ( \W + \pw ( \W ) ) & = & \varepsilon _ { \zeta _ 0 + \zeta _ 0 } \\
    \pw ( \W + \W ) & = & \zeta _ 1 \\
  \end{eqnarray*}
</math>

== 順序数表記 ==

Bachmann ψ (recasted) を元にした順序数表記は探しても見つからなかった。ここのは私が独自に定めたものである。この順序数表記は良く知られた順序数表記である Buchholz ψ と違って <math> \w ^ \alpha </math> が基本記号（表記を構成する様々なアリティの定数記号および関数記号）に含まれている。そのため、この順序数表記が正しいのかはまだわかってない。

=== 定義 ===

集合 <math> T </math> を次のような条件を満たす最小の集合であるとして定める。

# <math> 0 \in T </math> である。
# <math> a \in T </math> に対して <math> \w ^ a \in T </math> である。
# <math> a \in T </math> に対して <math> \pw ( a ) \in T </math> である。
# <math> \W \in T </math> である。
# <math> 1 \lt k \le \w </math> を取り、単項（条件 2, 3, 4 で構成された要素）の列 <math> a _ 0, \ldots, a _ k \in T </math> に対して <math> a _ 0 + \cdots + a _ k \in T </math> である。

集合 <math> T </math> の上の狭義全順序 <math> < </math> を次のように帰納的に定める。

# <math> 0 < 0 </math> ではない。
# <math> 0 </math> ではない <math> a \in T </math> に対して <math> 0 < a </math> である。
# <math> 0 </math> ではない <math> a \in T </math> に対して <math> a < 0 </math> ではない。
# いずれも <math> 0 </math> ではない <math> a, b \in T </math> に対して、
## <math> a, b </math> の双方とも単項であるとき、
### <math> a = \w ^ { a' }, \, b = \w ^ { b' } </math> のとき <math> a' < b' </math> と同値である。
### <math> a = \w ^ { a' }, \, b = \pw ( b' ) </math> のとき <math> a' < \pw ( b' ) </math> と同値である<ref group="注釈"><math> \pw ( b' ) </math> は必ず <math> \xi \mapsto \w ^ \xi </math> の不動点である</ref>。
### <math> a = \w ^ { a' }, \, b = \W </math> の時 <math> a' < \W </math> と同値である<ref group="注釈"><math> \W </math> は最大元ではない</ref>。
### <math> a = \pw ( a' ), \, b = \w ^ { b' } </math> のとき <math> \pw ( a' ) < b' </math> と同値である。
### <math> a = \pw ( a' ), \, b = \pw ( b' ) </math> のとき <math> a' < b' </math> と同値である。
### <math> a = \pw ( a' ), \, b = \W </math> のとき <math> a < b </math> である。
### <math> a = \W, \, b = \w ^ { b' } </math> のとき <math> a < b' </math> と同値である。
### <math> a = \W, \, b = \pw ( b' ) </math> のとき <math> a < b </math> ではない。
### <math> a = \W, \, b = \W </math> のとき <math> a < b </math> ではない。
## <math> a </math> が単項で <math> b </math> が単項ではないとき、
### <math> b = { b' } _ 0 + \cdots + { b' } _ k </math> のとき、
#### <math> a < { b' } _ 0 </math> であるならば <math> a < b </math> である。
#### <math> a = { b' } _ 0 </math> であるならば <math> a < b </math> である。
#### <math> a > { b' } _ 0 </math> であるならば <math> a < b </math> ではない。
## <math> a </math> が単項ではなく <math> b </math> が単項のとき、
### <math> a = { a' } _ 0 + \cdots + { a' } _ k </math> のとき、
#### <math> { a' } _ 0 < b </math> であるならば <math> a < b </math> である。
#### <math> { a' } _ 0 = b </math> であるならば <math> a < b </math> ではない。
#### <math> { a' } _ 0 > b </math> であるならば <math> a < b </math> ではない。
## <math> a, b </math> が双方とも単項ではないとき、
### <math> a = { a' } _ 0 + \cdots + { a' } _ m, \, b = { b' } _ 0 + \cdots + { b' } _ n </math> のとき、以下のいずれかが成り立てば <math> a < b </math> である
#### <math> m < n </math> であり、どの <math> i \le m </math> に対しても <math> { a' } _ i = { b' } _ i </math> である。
#### <math> k \le \min \{ m, n \} </math> が存在して <math> a _ k < b _ k </math> を満たし、どの <math> i < k </math> に対しても <math> { a' } _ i = { b' } _ i </math> である。

集合 <math> G ( a ) </math> を次のような条件を満たす最小の集合であるとして定める。

# <math> a = 0 </math> のとき <math> G ( a ) = \emptyset </math> である。
# <math> a = \w ^ { a' } </math> のとき  <math> G ( a ) = \{ a' \} \cup G ( a' ) </math> である<ref group="注釈">この部分は <math> G ( a ) = G ( a' ) </math> と簡略化できるかもしれない</ref>。
# <math> a = \pw ( a' ) </math> のとき <math> G ( a ) = \{ a' \} \cup G ( a' ) </math> である。
# <math> a = \W </math> のとき <math> G ( a ) = \emptyset </math> である。
# <math> a = { a' } _ 0 + \cdots + { a' } _ k </math> のとき <math> G ( a ) = G ( { a' } _ 0 ) \cup \cdots \cup G ( { a' } _ k ) </math> である。

集合 <math> OT </math> を次のように帰納的に定める。

# <math> 0 \in OT </math> である。
# <math> a \in OT </math> に対して <math> a = 0 </math> か <math> a = { a' } _ 0 + \cdots + { a' } _ k </math> であれば <math> \w ^ a \in OT </math> である。
# <math> a \in OT </math> に対して <math> \forall a', \, a' \in G ( a ) \to a' < a </math> であれば <math> \pw ( a' ) \in OT </math> である。
# <math> \W \in OT </math> である。
# <math> a _ 0, \ldots, a _ k \in OT </math> に対して <math> a _ 0 \ge \cdots \ge a _ k </math> であれば <math> a _ 0 + \cdots + a _ k \in OT </math> である。

対応 <math> o ( a ) </math> を次のようにして定める。

# <math> a = 0 </math> のとき <math> o ( a ) = 0 </math> である。
# <math> a = \w ^ { a' } </math> のとき <math> o ( a ) = \w ^ { o ( a' ) } </math> である。
# <math> a = \pw ( a' ) </math> のとき <math> o ( a ) = \pw ( o ( a' ) ) </math> である。
# <math> a = \W </math> のとき <math> o ( a ) = \W </math> である。
# <math> 1 \lt k \le \w </math> を取って <math> a = { a' } _ 0 + \cdots + { a' } _ k </math> のとき <math> o ( a ) = o ( { a' } _ 0 ) + \cdots + o ( { a' } _ k ) </math> である。

=== 計算 ===

標準形の判定はこのようになる。

<math>
  \begin{array}{ll}
    0 & T \\
    \pw ( 0 ) & T \\
    \pw ( \W ) & T \\
    \w ^ 0 & T \\
    \w ^ 0 + \w ^ 0 & T \\
    \pw ( 0 ) + \pw ( 0 ) & T \\
    \w ^ { \pw ( 0 ) } & F \\
  \end{array}
</math>

=== 性質 ===

このような性質が期待される。証明はまだない。

* <math> o \colon OT \to \mathrm{On} </math> は <math> OT </math> の上の <math> < </math> から通常の <math> < </math> へ順序を保つ写像である。このことから <math> OT </math> の上の <math> < </math> は整列順序を構成する。

=== 基本列 ===

<math> a \in T </math> の基本列は次のようになる。

# <math> a = 0 </math> のとき <math> \mathrm{cof} ( a ) = 0 </math> であり、基本列は{{wja|空関数}}により与えられる。
# <math> a = \w ^ b </math> のとき
## <math> b = 0 </math> のとき <math> \mathrm{cof} ( a ) = 1 </math> であり、基本列は <math> a [ 0 ] = 0 </math> により与えられる。
## <math> b = c + \w ^ 0 </math> のとき <math> \mathrm{cof} ( a ) = \w </math> であり、基本列は <math> a [ n ] = \w ^ c \times n </math> により与えられる<ref group="注釈">ここでの乗算は略記と捉えてほしい</ref>。
## <math> b \in L </math> のとき <math> \mathrm{cof} ( a ) = \mathrm{cof} ( b ) </math> であり、基本列は <math> a [ n ] = \w ^ { b [ n ] } </math> により与えられる。
# <math> a = \pw ( b ) </math> のとき
## <math> b = 0 </math> のとき <math> \mathrm{cof} ( a ) = \w </math> であり、基本列は <math> a [ 0 ] = 0, \, a [ n + 1 ] = \w ^ { a [ n ] } </math> により与えられる。
## <math> b = c + \w ^ 0 </math> のとき <math> \mathrm{cof} ( a ) = \w </math> であり、基本列は <math> a [ 0 ] = \pw ( c ) + \w ^ 0, \, a [ n + 1 ] = \w ^ { a [ m ] } </math> により与えられる。
## <math> \mathrm{cof} ( b ) = \w </math> のとき <math> \mathrm{cof} ( a ) = \w </math> であり、基本列は <math> a [ n ] = \pw ( b [ n ] ) </math> により与えられる。
## <math> \mathrm{cof} ( b ) = \W </math> のとき <math> \mathrm{cof} ( a ) = \w </math> であり、基本列は <math> a [ n ] = \pw ( b [ c [ n ] ] ) </math> と <math> c [ 0 ] = 0, \, c [ n + 1 ] = \pw ( b [ c [ n ] ] ) </math> により与えられる。
# <math> a = \W </math> のとき <math> \mathrm{cof} ( a ) = \W </math> であり、基本列は <math> a [ n ] = n </math> により与えられる。
# <math> a = a _ 0 + \cdots + a _ k </math> のとき <math> \mathrm{cof} ( a ) = \mathrm{cof} ( a _ k ) </math> であり、基本列は <math> a [ n ] = a _ 0 + \cdots + ( a _ k [ n ] ) </math> により与えられる。

=== プログラム ===

作業中……（[https://github.com/Hexirp/googology ここ]にて）

== 注釈 ==

<references group="注釈" />

== 出典 ==

<references />

== 参考文献 ==

* GWiki 2019 - [https://googology.wikia.org/wiki/Ordinal_notation?oldid=258188 Ordinal notation | Googology Wiki | FANDOM powered by Wikia]

== 関連項目 ==

* [[バッハマン・ハワード順序数]]
* [[Ψ関数]]
