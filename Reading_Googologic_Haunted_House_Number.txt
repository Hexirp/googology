[https://googology.wikia.org/ja/wiki/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%96%E3%83%AD%E3%82%B0:P%E9%80%B2%E5%A4%A7%E5%A5%BD%E3%81%8Dbot/PTO(ZFC)%E3%82%92%E8%B6%85%E3%81%88%E3%81%9FFGH ユーザーブログ:P進大好きbot/PTO(ZFC)を超えたFGH | 巨大数研究 Wiki | Fandom] にて、略して巨大数屋敷数という数が投稿された。この数は \( \mathrm{PTO} ( \mathrm{ZFC} ) \) を急増加関数に与えたものを疑似的に計算するものである。超越整数と似ているが、順序数を介することにより増加速度が安定している、らしい。これは記憶が不確かなので間違っているかもしれない。

私は巨大数屋敷数の定義を以前に読もうとした。それで \( \mathrm{PTO} ( \mathrm{ZFC} ) \) レベルであることの証明を追えるまでとはいかないものの、定義のそれぞれの意図は把握できたと思う。それらをかつてツイートしたのだが、今ここに纏めて清書しようと思う。

== 原文 ==

ここで、コード配列の例で導入した\(\Theta_{\omega}\)と\(\Phi_{\omega}\)を用いる。\(k \in \mathbb{N}\)に対し\(a_{\omega}^{k} = (\Theta_{\omega},k,\Phi_{\omega})\)と置く。

\(A\)を順序数配列とし、\(n \in \mathbb{N}\)とする。順序数配列\(A[n]\)を以下のように再帰的に定める：

# \(L = \textrm{Lng}(A)\)と置く。
# \(L = 0\)ならば、\(A[n] = A\)である。
# \(L > 0\)とする。
## \((\Theta,k,\Phi) = A_{L-1}\)と置く。
## \(n\)以下の各\(i \in \mathbb{N}\)に対し、\(b_i \in \mathbb{N}\)を以下のように再帰的に定める：
### \(i = 0\)とする。
#### \(A_{L-1} \neq a_{\omega}^{k}\)ならば、\(b_i = 0\)である。
#### \(A_{L-1} = a_{\omega}^{k}\)ならば、\(b_i = 1\)である。
### \(i > 0\)とする。
#### \(b_{i-1} > 0\)ならば、\(b_i = b_{i-1}\)である。
#### \(b_{i-1} = 0\)とする。
##### \(\textrm{EnumNestArray}(i)\)が斧のみを用いる設計図配列でないならば、\(b_i = 0\)である。
##### \(\textrm{EnumNestArray}(i)\)が斧のみを用いる設計図配列であるとする。
###### \(\textrm{Result}(\textrm{EnumNestArray}(i)) \neq F_{\textrm{DS},\Theta,\Phi}\)であるならば、\(b_i = 0\)である。
###### \(\textrm{Result}(\textrm{EnumNestArray}(i)) = F_{\textrm{DS},\Theta,\Phi}\)であるならば、\(b_i = i\)である。
## \(b_n = 0\)ならば、\(A[n] = (A_i)_{L=0}^{L-2} \frown (a_{\omega}^{n})\)である。
## \(b_n > 0\)とする。
### \(k' = \textrm{Output}_{\Phi}(k,n)\)と置く。
### \(k' = k\)とする。
#### \(A_{L-1} = a_{\omega}^{k}\)ならば、\(A[n] = (A_i)_{i=0}^{L-2}\)である。
#### \(A_{L-1} \neq a_{\omega}^{k}\)ならば、\(A[n] = (A_i)_{L=0}^{L-2} \frown (a_{\omega}^{n})\)である。
### \(k' \neq k\)ならば、\(A[n] = (A_i)_{L=0}^{L-2} \frown ((\Theta,k',\Phi))\)である。


α+β+...+n みたいな形の時は 3.2.1.2 が適用される。

a_ω^k は k という自然数（有限順序数）を表す？

有限順序数は a_ω^k で定義される形をしているとは限らないが、どうせ後でありとあらゆる場合を渡るため、a_ω^k に限定しても問題ない……？ #巨大数屋敷数

3.2.1 で後続順序数か極限順序数なのかを判定。後続なら b_0 = b_1 = b_2 = ... = 1 。

極限なら、設計図配列 i を見つけてくる。うーん…… #巨大数屋敷数

3.4.2 はもう降下しない時
3.4.3 はまだ降下してゆける時

k を降下して k’ に変える。例えば α = ε0, k = ω^2 の時は n = 6 に対して k’ = ω*6 になったり。

基本的に末尾への操作

読み返す必要があるかな？ #巨大数屋敷数


ねえ、≦ への整礎性という概念があるらしいけど何なのかしら？

< を作ってその上での整礎性を考えるらしい


急増加関数配列の所は目新しくはない。急増加関数が関数合成で定義されているのを配列に変えているだけ

[ω+1](3)
[ω, ω, ω](3)
[ω, ω, 3](3)
[ω, ω, 2, 2, 2](3)
[ω, ω, 2, 2, 1, 1, 1](3)
[ω, ω, 2, 2, 1, 1, 0, 0, 0](3)
[ω, ω, 2, 2, 1, 1, 0, 0](4) #巨大数屋敷数

Θ_ω と Φ_ω は ω を表すもので、それを k で制限すると k を表すようになる

A^n_Lim は大体 [0, 1, 2, 3, 4, 5, ...] になる。n 番目の要素は EnumNestArray(n) が降下列になればそのまま、降下列でなければ a^n_ω になる

A^n_LIM は急増加関数配列 [A^n_Lim, ... (n個)] 。

Lim(n) := <[A^n_Lim], n>
LIM(n) := <A^n_LIM, n> #巨大数屋敷数

Lim(n) := <[A^n_Lim], n>
LIM(n) := <A^n_LIM, n>

定義はここで終わり。_[_] と <_, _> の混同に注意。基本列を表現するコード配列 Φ の適用も _[_] と書いちゃってることがある。 #巨大数屋敷数

コード配列の形式化の所は読み飛ばした。たぶん、そのせいで _[_] の定義が訳分からなかった。例えば、2[4] とかの結果がどうなって、そういう時にどう処理されるのかとか。 #巨大数屋敷数


任意の自然数の二つ組 (m, n) を取る。自然数 x が存在して……

f_•() って何だ？ 下付き文字から考えるならば写像の適用だけど……

任意の関数 f : N -> N を取る。自然数 x が存在して Θ が f(x) ≦ f(s(x)) だと判定する……とうことかな？ #巨大数屋敷数

「X の元からなる任意の狭義単調減少列は必ず有限な長さで停止する」を使って整礎順序を定義しているのか？

数列だと説明しているからそれっぽいけど……

F^2_RWO の意味がよくわからん #巨大数屋敷数

ああ、なるほど。これで正しいな。 R^2_RWO は、どのような無限列 a_i も単調減少列にならない (= a_x <= a_s(x) なる x が存在する) ことでもって整礎性を表現している。

#巨大数屋敷数

降下列は Θ’ で表される。これは (N, N) -> N の関数で、ここだけ _[_] と書く。a[n] の値はは以下のどちらかである。

(1) a > a[n] である。
(2) a = a[n] であり、この時 a は、全ての x に対して a ≦ x である。

#巨大数屋敷数


つまり、最小元であるか判定する方法があることになる。

降下列配列の定義で、k による制限が導入されているけど、その範囲内に入っているかどうかは k の下位の下位の……と辿っていく全ての場合で到達できないのか確かめないといけないので計算できないのでは？

いや、推移関係なので k と比較するだけで済む。恥ずかしい……


なるほど、(Θ, k, Φ) の k は制限というだけではなくポインタみたいな役割を果たすのか。

(A_0, A_1, (Θ, k, Φ)) みたいな配列を考えた時、(A_0, A_1, (Θ, k, Φ))[n] = (A_0, A_1, (Θ, Φ(k, n), Φ)) になる（他の場合もある）。


具体的に計算してみる。ε_0 を表す適切な Θ を取る。α < ε_0 に対して、Θ において α に対応する自然数を <α> と書くものとする。逆を [n] と書くものとする。これに対する Φ は以下のように計算されるものとする。

Φ(<0>, n) = <0>
Φ(<m>, n) = <m-1> (m < ω)
Φ(<ω>, n) = <n>
Φ(<ω^(α+1)>, n) = <ω^(α+1)*n>
Φ(<ω^α>, n) = <ω^[Φ(α, n)]> (α is limit)
Φ(ω^(α_0)+ω^(α_1)+...+ω^(α_k)) = <ω^(α_0)+ω^(α_1)+...+[Φ(<ω^(α_k)>, n)]> (a_0 ≧ a_1 ≧ ... ≧ a_k)

本文の中で定義されていた A^k_ω を (ΘΦ, <k>, Φ) によって上書きで定める。


具体的に計算してみる。ε_0 を表す適切な Θ を取る。α < ε_0 に対して、Θ において α に対応する自然数を <α> と書くものとする。逆を [n] と書くものとする。これに対する Φ は以下のように計算されるものとする。

Φ(<0>, n) = <0>
Φ(<m>, n) = <m-1> (0 < m < ω)
Φ(<ω>, n) = <n>
Φ(<ω^(α+1)>, n) = <ω^(α+1)*n>
Φ(<ω^α>, n) = <ω^[Φ(α, n)]> (α is limit)
Φ(<ω^(α_0)+ω^(α_1)+...+ω^(α_k)>, n) = <ω^(α_0)+ω^(α_1)+...+[Φ(<ω^(α_k)>, n)]> (a_0 ≧ a_1 ≧ ... ≧ a_k)
Φ(<ω^(α_0)+ω^(α_1)+...+ω^(α_k)+m>, n) = <ω^(α_0)+ω^(α_1)+...+ω^(α_k)+(m-1)> (a_0 ≧ a_1 ≧ ... ≧ a_k, 0 < m < ω)

本文の中で定義されていた A^k_ω を (Θ, <k>, Φ) によって上書きで定める。


“α” = (Θ, <α>, Φ) とする。(“ω^ω^ω”)[n] を計算する。

L > 0 より 3 が適用される。EnumNestArray(i) が Θ 降下列に Φ がなるという証明になる最小の i を取り、i ≦ j なら b_j = i 、そうでないなら b_j = 0 。b_n = 0 、つまり i > n なら (“n”) になる。b_n > 0 、つまり i ≦ n なら k’ = Φ(<ω^ω^ω>, n) を考え、k’ = <ω^ω^ω> なら (“n”) に k’≠ <ω^ω^ω> なら (“[Φ(<ω^ω^ω>, n)]”) である。

まとめよう。(“ω^ω^ω”)[n] は、EnumNestArray(i) が Θ-降下列に Φ がなるという証明になる最小の i を取って、i > n なら (“n”) になり i ≦ n なら (“ω^ω^n”) になる。

== 清書 ==

作業中……。
