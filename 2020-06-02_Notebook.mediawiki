Coq における余帰納型を帰納型へ変換する方法について考察する。

<pre>
CoInductive Stream@{i} (A : Type@{i}) : Type@{i}.
  Destructor head : Stream A -> A.
  Destructor tail : Stream A -> Stream A.
End Stream.
</pre>

これが通常の Stream となる。

<pre>
Inductive StreamSpine@{i} : Type@{i}.
  Constructor zeroStreamSp : StreamSpine.
  Constructor succStreamSp : StreamSpine.
End StreamSpine.

Inductive StreamBody@{i i'} (A : Type@{i'}) : StreamSpine@{i} -> Type@{i'}.
  Constructor thankStream : StreamBody zeroStreamSp.
  Constructor makeStream : pi sp, A -> StreamBody A sp -> StreamBody A (succStreamSp sp).
End StreamBody.

Definition Stream@{i i'} (A : Type@{i'}) Type@{i'} := sigma (f : pi (sp : StreamSpine), StreamBody A sp), Prod (thankStream = f zeroStreamSp) (pi (sp : StreamSpine), sigma (x : A), makeStream sp x (f sp) = f (succStreamSp sp))
</pre>

これが帰納型に変換された Stream である。

----

私は巨大数を急増加関数で作るために順序数表記を使いたい。順序数表記の強さを測るために理論を使いたい。

つまり、順序数解析を学ぶときにはある順序数がある理論の証明論的順序数以上であることが分かればよい。

順序数表記が正しいことを示すためには、その順序型が元となる順序数の関数群の上限と一致することを示せばよい。また、基本列が正しいことを示すためには、ある順序数の基本列に含まれるすべての順序数よりも大きい最小の順序数が元々の順序数となることを示せばよい。
