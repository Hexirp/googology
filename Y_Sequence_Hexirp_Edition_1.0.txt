<div style="display:none"><math>

  \newcommand{\ordinarycolon}{:}
  \newcommand{\vcentcolon}{\mathrel{\mathop\ordinarycolon}}
  \newcommand{\coloneqq}{\vcentcolon\mathrel{\mkern-1.2mu}=}

  \newcommand{\nil}{[\mkern3.0mu]}
  \newcommand{\cons}{\vcentcolon\mathrel{\mkern-1.2mu}\vcentcolon}
  \newcommand{\append}{\mathrel{{+}\mkern-3.0mu{+}}}

</math></div>

Y数列 Hexirp 版 1.0 は Hexirp 版 0.0 を清書したものである。多くの関数の定義が整理され、様々な間違いが修正された他にも、まだ定義できていないクラス 2 以上に対する展開の部分が取り除かれた。そのため、このバージョンは (1,3) 未満にしか定義されていない（繰り返し展開していくとき）。

このバージョンは、本家が意図するところの理想的なY数列の展開とは明確に違う。例として <math> S = (1,2,4,8,10,8) </math> の展開を見てみる。

; 本家（理想）
: <math> S [ 3 ] = (1,2,4,8,10,7,12,15,11,17,21,16,23,28) </math>
; Hexirp 版 1.0
: <math> S [ 3 ] = (1,2,4,8,10,7,12,14,11,17,19,16,23,25) </math>

この違いはずれるかどうか（上昇するかどうか）の判定方法が理想と異なるためであり、より近づけたものを Hexirp 版 1.1 として公開する予定である。

== 型とパターン ==

数列は自然数のリストである。DPN形式は D, P, N のタプルのリストである。リストは何らかの列である。リストは添字が 0 から始まるが、特別に数列とDPN形式だけは添字が 1 から始まる。数列は丸括弧とコンマで表され、DPN形式は行列で表され、リストは角括弧とコンマで表される。いずれも基本構造は <math> \_ \cons \_, \nil </math> である。

数列やDPN形式に関係して現れる 0 は何らかの例外を示す。リストに関係して現れる 0 はそうでない。

== 一般的な表記 ==

ゼロを含まない自然数全体の集合は以下のように表記する。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    \mathbb{N} ^ + & = & \{ x \in \mathbb{N} \mid x \neq 0 \} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

再帰により減少および増加していく引数の増減には以下のような表記を使う。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    x ^ - & = & x - 1 \\
    x ^ + & = & x + 1 \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

数列に関する表記は以下のようになる。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    X _ S & = & \mathrm{length} ( S ) \\
    S & = & ( S _ 1, S _ 2, \ldots, S _ { X _ S } ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

リストに関する表記は以下のように定義される。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    [ x _ 0, x _ 1, \ldots, x _ n ] & = & x _ 0 \cons x _ 1 \cons \cdots \cons x _ n \cons \nil \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

DPN形式に関する表記は以下のようになる。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    X _ Z & = & \mathrm{length} ( Z ) \\
    Z & \coloneqq &
      \left (
        \begin{array}{cccc}
          Z _ { 1, 1 } & Z _ { 1, 2 } & \cdots & Z _ { 1, X _ Z } \\
          Z _ { 2, 1 } & Z _ { 2, 2 } & \cdots & Z _ { 2, X _ Z } \\
          Z _ { 3, 1 } & Z _ { 3, 2 } & \cdots & Z _ { 3, X _ Z } \\
        \end{array}
      \right ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

リストに関する汎用関数は以下の通りである。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    \mathrm{idx} ( p, n ) & \coloneqq &
      \begin{cases}
        p _ a                                     & ( p = p _ a \cons \nil                          ) \\
        p _ a                                     & ( p = p _ a \cons p _ b \cons p _ s \land n = 0 ) \\
        \mathrm{idx} ( p _ b \cons p _ s, n ^ - ) & ( p = p _ a \cons p _ b \cons p _ s \land n > 0 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

idx (index) はリストの要素へ 0 始まりの添字でアクセスする。だが、要素がもうないときはエラーにならず最後の要素を返す。この関数はもっぱらDPN形式のP、つまり親のリストから全ての深さでの親を復元するために使われる。

== 数列から山への展開 ==

数列から山への展開は既に完成している。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    D _ S ( x, n ) & \coloneqq &
      \begin{cases}
        S _ x                                                    & ( n = 1                              ) \\
        0                                                        & ( n > 1 \land P _ S ( x, n ^ - ) = 0 ) \\
        D _ S ( x, n ^ - ) - D _ S ( P _ S ( x, n ^ - ), n ^ - ) & ( n > 1 \land P _ S ( x, n ^ - ) > 0 ) \\
      \end{cases} \\
    P _ S ( x, n ) & \coloneqq &
      \begin{cases}
        0                                                                                                                          & ( n = 1 \land D _ S ( x, n ) = 1 ) \\
        \max \{ p \in \mathbb{N} ^ + \mid p < x \land D _ S ( p, n ) < D _ S ( x, n ) \}                                           & ( n = 1 \land D _ S ( x, n ) > 1 ) \\
        0                                                                                                                          & ( n > 1 \land D _ S ( x, n ) = 0 ) \\
        \max \{ p \in \mathbb{N} ^ + \mid p < x \land D _ S ( p, n ) < D _ S ( x, n ) \land p \in \mathrm{Anc} _ S ( x, n ^ - ) \} & ( n > 1 \land D _ S ( x, n ) > 0 ) \\
      \end{cases} \\
    \mathrm{Anc} _ S ( x, n ) & \coloneqq &
      \begin{cases}
        \emptyset                                           & ( x = 0 ) \\
        \{ x \} \cup \mathrm{Anc} _ S ( P _ S ( x, n ), n ) & ( x > 0 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

D (Diff) は差分を記述し、 P (Parent) はそれらの親を記述する。親を決定する際、バシク行列システムのバージョン 4 と同じように Upper-branch ignoring モデルを使う。その決定に必要になるため Anc (Ancestor) が補助関数として用意されている。

[https://raw.githubusercontent.com/Hexirp/googology/master/v1.0_2.png v1.0_2.png]

== 山からDPN形式への圧縮 ==

山からDPN形式への圧縮は既に完成している。圧縮の仕方は次の通りである。

第一に、どの深さで展開するか定める。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    T _ S & \coloneqq & \max \{ n \in \mathbb{N} ^ + \mid D _ S ( X _ S, n ) > 0 \} \\
    c _ S & \coloneqq & D _ S ( X _ S, T _ S ) \\
    t _ S & \coloneqq &
      \begin{cases}
        T _ S - 1 & ( c _ S = 1 ) \\
        T _ S     & ( c _ S > 1 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

T はカットする部分の中で最も深いゼロではない要素の深さである。 c は T の要素の値であり、これが数列のクラスである。 t は展開する深さである。ここで c が 1 だと T - 1 になるが、それ以外ではそのままである。ここは (1,2,4,8) などを展開しようとするときに深さを 1 つ減らさないとできなかったため、こうなった。このような定義が必要なのは横へ展開するか斜めへ展開するかの違いが原因だと私は見ている。

第二に、どこからどこまで親のデータを保存するか決める。さっきもちらっと触れたが、「親が変化し始めてから最大の深さに到達するまでの親」が範囲である。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    m            _ S ( x ) & \coloneqq & \min ( n _ S ( x ), u _ S ( x ) ) \\
    u            _ S ( x ) & \coloneqq & \max \{ n \in \mathbb{N} ^ + \mid P _ S ( x, 1 ) = P _ S ( x, n ) \land n \le \mathrm{btm} _ S  ( x ) \} \\
    \mathrm{btm} _ S ( x ) & \coloneqq & \max \{ n \in \mathbb{N} ^ + \mid D _ S ( x, n ) > 0 \} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

ここで最大の深さとは n である。 u は親が変化し始めた箇所である。補助関数として親が存在する最も深い深さを返す btm が用意されている。

第三に、DPN形式を構築する。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    d _ S ( x ) & \coloneqq & D _ S ( x, n _ S ( x ) ) \\
    p _ S ( x ) & \coloneqq & \mathrm{map} ( \lambda v \ldotp P _ S ( x, v ), \mathrm{enumFromTo} ( m _ S ( x ), n _ S ( x ) ) ) \\
    n _ S ( x ) & \coloneqq & \min ( t _ S, \mathrm{btm} _ S ( x ) ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

ここで n は一番下に書かれているくせに他の個所から使われているので注意である。その意味は、さっきも書いた通り「最大の深さ」である。どのくらい深く潜れるか (btm) と展開の深さ (t) を合わせて決定する。 d ( x ) は n での D である。 p は m から n までの P のリストである。

ここで、深さを返す大量の関数 (T, t, btm, n, u, m) が出てくるためわかりづらいかもしれない。理解の一助になればと図を描いた。

[https://raw.githubusercontent.com/Hexirp/googology/master/v1.0_1.png v1.0_1.png]

== DPN形式の展開 ==

DPN形式の展開はクラス 1 に対するものだけ完成している。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    d _ Z ( x ) & \coloneqq & Z _ { 1, x } \\
    p _ Z ( x ) & \coloneqq & Z _ { 2, x } \\
    n _ Z ( x ) & \coloneqq & Z _ { 3, x } \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

d, p, n はそれぞれ対応する要素へのアクセス関数である。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    R _ Z & \coloneqq & \mathrm{last} ( p _ Z ( X _ Z ) ) \\
    G _ Z & \coloneqq &
      \left (
        \begin{array}{cccc}
          Z _ { 1, 1 } & Z _ { 1, 2 } & \cdots & Z _ { 1, R _ Z - 1 } \\
          Z _ { 2, 1 } & Z _ { 2, 2 } & \cdots & Z _ { 2, R _ Z - 1 } \\
          Z _ { 3, 1 } & Z _ { 3, 2 } & \cdots & Z _ { 3, R _ Z - 1 } \\
        \end{array}
      \right ) \\
    B _ Z & \coloneqq &
      \left (
        \begin{array}{cccc}
          Z _ { 1, R _ Z - 1 + 1 } & Z _ { 1, R _ Z - 1 + 2 } & \cdots & Z _ { 1, X _ Z - 1 } \\
          Z _ { 2, R _ Z - 1 + 1 } & Z _ { 2, R _ Z - 1 + 2 } & \cdots & Z _ { 2, X _ Z - 1 } \\
          Z _ { 3, R _ Z - 1 + 1 } & Z _ { 3, R _ Z - 1 + 2 } & \cdots & Z _ { 3, X _ Z - 1 } \\
        \end{array}
      \right ) \\
    C _ Z & \coloneqq &
      \left (
        \begin{array}{c}
          Z _ { 1, X _ Z } \\
          Z _ { 2, X _ Z } \\
          Z _ { 3, X _ Z } \\
        \end{array}
      \right ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

R は分割する位置、 G は良い部分、 B は悪い部分、 C は切り落とされる要素である。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    \mathrm{pnt} _ Z ( x, n ) & \coloneqq &
      \begin{cases}
        \mathrm{idx} ( \mathrm{reverse} ( p _ Z ( x ) ), n _ Z ( x ) - n ) & ( n \leq n _ Z ( x ) ) \\
        0                                                                  & ( n >    n _ Z ( x ) ) \\
      \end{cases} \\
    \mathrm{anc} _ Z ( x, n ) & \coloneqq &
      \begin{cases}
        \emptyset                                                      & ( x = 0 ) \\
        \{ x \} \cup \mathrm{anc} _ Z ( \mathrm{pnt} _ Z ( x, n ), n ) & ( x > 0 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

pnt (parent) は親の情報を全て復元する。そのデータを使って anc (ancestor) は祖先を計算する。

ここで本来であればクラスによる分岐がある。この分岐に跨る関数が二つあり、それは r と e である。しかしながら、ここではクラス 1 だけ取り扱うため分岐がなくなっている。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    r _ Z & \coloneqq & R _ Z \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

R が D への bad root だとしたら r は P と N への bad root である。この値は P と N がコピーされる範囲を決めるが、それよりも重要なのが、展開された後のDPN形式の行列の長さ <math> X _ { Z [ n ] } </math> は <math> X _ Z - 1 + r \times n </math> に等しいということである。この性質は、クラス n での定義で重要になる。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    \delta _ Z & \coloneqq & X _ Z - r _ Z \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

δ はコピーされる部分の長さであり、主に親を参照するインデックスがどれだけずれるかを決める。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    a _ Z ( y, n ) & \coloneqq &
      \begin{cases}
        1 & ( r _ Z \in    \mathrm{anc} _ Z ( r _ Z - 1 + y, n ) ) \\
        0 & ( r _ Z \notin \mathrm{anc} _ Z ( r _ Z - 1 + y, n ) ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

位置 y と深さ n を取って親がずれるかどうかを決める。もし、先祖を辿って行って bad root に行き着くならば一緒にずれる。そうでないならば、ずれない。ここで位置に y を使っているのは bad part の内部の位置であるため。全体の位置なら x になる。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    \mathrm{bas} _ Z ( y ) & \coloneqq &
      \begin{cases}
        p _ Z ( X _ Z )         & ( y = 1 ) \\
        p _ Z ( r _ Z - 1 + y ) & ( y > 1 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

bas (base) はコピーされた bad part の基本の親を決める。これが必要なのは接ぎ木があるからである。元の bad part とは違って、コピーされた bad part は一番最初の要素の親がカットされた要素の親になる。カットされた部分に接ぎ木するイメージである。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    \mathrm{rising} _ Z ( m, y, p, n ) & \coloneqq & p + m \times \delta _ Z \times a _ Z ( y, n ) \\
    \mathrm{rise} _ Z ( m, y, p, n ) & \coloneqq &
      \begin{cases}
        ( \nil, n )                                                  & ( p = \nil                                                                      ) \\
        ( \mathrm{rising} _ Z ( m, y, p _ v, n' ) \cons p', n' - 1 ) & ( p = p _ v \cons p _ s \land ( p', n' ) = \mathrm{rise} _ Z ( m, y, p _ s, n ) ) \\
      \end{cases} \\
    \mathrm{ris} _ Z ( m, y, p, n ) & \coloneqq & p' \quad ( ( p', \_ ) = \mathrm{rise} _ Z ( m, y, p, n ) ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

ris (rising) は親をずらしていく部分。引数の m はコピーされた行列の中で 1 始まりで何番目か、 y はコピーされた行列で 1 始まりで何番目か、 p は親のデータ群、 n は深さである。

rise の定義は最難関かもしれない。継続っぽい手法を使ってリストの構造と逆向きの再帰 (foldl) を順向きの再帰 (foldr) に変換している。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    b _ Z ( m, y ) & \coloneqq & d _ Z ( r _ Z - 1 + y ) \\
    q _ Z ( m, y ) & \coloneqq &
      \begin{cases}
        \mathrm{ris} _ Z ( m - 1, y, \mathrm{bas} _ Z ( y ), n _ Z ( r _ Z - 1 + y ) ) & ( y = 1 ) \\
        \mathrm{ris} _ Z ( m, y, \mathrm{bas} _ Z ( y ), n _ Z ( r _ Z - 1 + y ) )     & ( y > 1 ) \\
      \end{cases} \\
    m _ Z ( m, y ) & \coloneqq & n _ Z ( r _ Z - 1 + y ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

b, q は普通のコピペ。 q は bas で接ぎ木している関係上、先頭のところだけ m が一つずれる。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    B _ Z ( m ) & \coloneqq &
      \begin{cases}
        B _ Z                                                                                                                       & ( c = 0 ) \\
        \mathrm{map} ( \lambda y \ldotp ( b _ Z ( m, y ), q _ Z ( m, y ), m _ Z ( m, y ) ), \mathrm{enumFromTo} ( 1, \delta _ Z ) ) & ( c > 0 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

B は、コピーされた悪い部分である。

最終的に、全体の展開は以下のようになる。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    Z' & \coloneqq &
      \begin{cases}
        G _ Z \append \mathrm{concat} ( \mathrm{map} ( \lambda m \ldotp B _ Z ( m ), \mathrm{enumFromTo} ( 0, n ) ) & ( c = 1 ) \\
        \mathrm{undefined}                                                                                          & ( c > 1 ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

== DPN形式から山への解凍 ==

DPN形式から山への解凍は既に完成している。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    d _ Z ( x ) & \coloneqq & Z _ { 1, x } \\
    p _ Z ( x ) & \coloneqq & Z _ { 2, x } \\
    n _ Z ( x ) & \coloneqq & Z _ { 3, x } \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

d, p, n はそれぞれ対応する要素へのアクセス関数である。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    D _ Z ( x, n ) & \coloneqq &
      \begin{cases}
        P _ Z ( x, n ^ + ) + D _ Z ( P _ Z ( x, n ), n ) & ( n < N _ Z ( x ) ) \\
        d _ Z ( x )                                      & ( n = N _ Z ( x ) ) \\
        0                                                & ( n > N _ Z ( x ) ) \\
      \end{cases} \\
    P _ Z ( x, n ) & \coloneqq &
      \begin{cases}
        \mathrm{idx} ( \mathrm{reverse} ( d _ Z ( x ) ), n _ Z ( x ) - n ) & ( n \leq N _ Z ( x ) ) \\
        0                                                                  & ( n >    N _ Z ( x ) ) \\
      \end{cases} \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}

D, P は言わずもがな山を作る関数である。

== 山から数列への変換 ==

山から数列への変換は既に完成している。

{{User:Hexirp/Template:Scroll Top}}

<math>
  \begin{eqnarray*}
    S & \coloneqq & \mathrm{map} ( \lambda x \ldotp D _ Z ( x, 1 ), \mathrm{enumFromTo} ( 1, X _ Z ) ) \\
  \end{eqnarray*}
</math>

{{User:Hexirp/Template:Scroll Bottom}}
