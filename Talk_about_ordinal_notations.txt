順序数表記について話す。私は構成主義に近い立場だと自分で思っており、この文章にもそれが反映されているだろう。特に集合ではなく型をベースにして思考していることが多いのに注意してほしい。

私は、今のところ順序数表記を重視している。その理由は思い付くものでは「定義が厳密である」というものがある。定義が厳密であることは大前提であるが、それを満たすようなシステムはまだ選択の余地がある。他の巨大数を生成するシステムを取り上げて比較してみる。

まず、超越整数は計算可能であり大きさも申し分ない。しかし、その大きさの下限や上限に関する情報は少ないように見え、具体性が欠けているように思える。次に、ビジービーバー関数に類するものは、定義が具体的であり弱い理論でも well-defined であることが証明できるが、計算不可能である。興味深いと思うが、今は順序数表記を学んでいる途中であり、後回しにしたい。次に、巨大庭園数に類するものは、強い理論の中で定義されるものであり計算不可能である。これも興味深いが後回しにする。

つまり、以前より順序数表記を勉強していて、一定の結果を出せるようになったので、私は順序数表記を重視しているということになる。

== 順序数表記の定義 ==

...

== 順序数表記の定義に関するテクニック ==

順序数表記の定義をする際に、私が考案したテクニックが二つある。それらは[https://googology.wikia.org/ja/wiki/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%96%E3%83%AD%E3%82%B0:Hexirp/%E8%A7%A3%E6%9E%90_(i_LoVe_Ordinal) 解析 (i_LoVe_Ordinal)] において完成を見た。

一つ目は、単項と加算列での相互再帰である。私が見る限り Googology Wiki に記載されている順序数表記の多くは単項と加算を一つの型（集合）で表している。その一例は [https://googology.wikia.org/wiki/Buchholz%27s_function?oldid=278444 Buchholz's function (the revision on 2020-02-16)] にある。しかしながら、これは、項を二つの場合に分ける必要が出てくることになり、比較や基本列の定義が複雑になってしまう。そこで単項 (additively indecomposable ordinal) と加算列の二つへと最初から分ける。

この場合の単項は、加算列へと関数を適用した結果である。そのような関数には \( x \mapsto \omega ^ x \) や \( ( x, y ) \mapsto \varphi _ x ( y ) \) などがある。また、順序数崩壊関数を元にしている場合は、その順序数崩壊関数自体も関数の一つに数えられる。さらに、関数に引数がない場合は定数となり、その例として \( \Omega \) などが挙げられる。

この場合の加算列は、単項の列である。要素の数はゼロでもよく、その場合は最小元であるところの 0 に対応することになる。その構造は Haskell のリストと同じである。

二つ目は、比較関数との相互再帰により「悪い非標準形」を事前に排除しておくというものである。

「悪い非標準形」という概念はきちんと定義できていないのだが、その一例を挙げることが出来る。標準形である項 \( \omega \) に対して \( 1 + \omega \) がそれである。これは順序数へと変換したとき \( o ( \omega ) = o ( 1 + \omega ) \) となる。しかし、順序数として変換する前の項としては \( \omega > _ \mathrm{T} 1 + \omega \) となるのである。一方で \( \epsilon _ 0 \) に対する \( \omega ^ { \epsilon _ 0 } \) は良い非標準形である。それは \( \epsilon _ 0 \neq \omega ^ { \epsilon _ 0 } \) である、つまり項として等しくないが、 \( o ( \epsilon _ 0 ) \neq o ( \omega ^ { \epsilon _ 0 } ) \) であり、さらに \( \epsilon _ 0 = _ \mathrm{T} \omega ^ { \epsilon _ 0 } \) である。ここでの例は使われる順序数表記の定義に強く依存しており、それがきちんと定義できていない理由である。

何はともあれ比較関数との相互再帰は、項と加算列と項に対する比較関数と加算列に対する比較関数の四つがそれぞれ相互再帰するというものである。これは[https://googology.wikia.org/ja/wiki/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%96%E3%83%AD%E3%82%B0:Hexirp/%E8%A7%A3%E6%9E%90_(i_LoVe_Ordinal) 解析 (i_LoVe_Ordinal)] にて明示されている。現在の Coq や Agda ではこのようなことは不可能であり、だが homotopy type theory の高階帰納型 (higher inductive type) で正当化できるのではないかと考えている。 Haskell 風の疑似コードで仮想的に定義するなら、このようになるのではないかと思う。もし、これを高階帰納型で表すならば <code> all_ge </code> などを関数ではなくデータ型に変更する必要があるだろう。なお、これが高階帰納型で表されると考える根拠は [https://homotopytypetheory.org/2014/02/22/surreals-plump-ordinals/ The surreals contain the plump ordinals | Homotopy Type Theory] に載っている plump ordinal の高階帰納型による定義に構文の上おいて類似するものが見られるためである。すなわち、これは \( \mathrm{POrd} : \mathrm{Type} \) と \( \mathrm{Ge} : \mathrm{POrd} \rightarrow \mathrm{POrd} \rightarrow \mathrm{Type} \) の相互帰納型による定義であり、これが許されるならば件のような定義が許されるであろうという考えである。

<pre><code>
data Unary :: Type where
  Omega :: Sequence -> Unary

data Sequence :: Type where
  Zero :: Sequence
  OPlus :: pi (u :: Unary) (s :: Sequence). all_ge u s = True -> Sequence

comp_u :: Unary -> Unary -> Ordering
comp_u (Omega xv) (Omega yv) := comp_s xv yv

comp_s :: Sequence -> Sequence -> Ordering
comp_s Zero             Zero             := EQ
comp_s Zero             (OPlus yu ys yH) := LT
comp_s (OPlus xu xs xH) Zero             := GT
comp_s (OPlus xu xs xH) (OPlus yu ys yH) := comp_u xu yu <> comp_s xs ys

comp := comp_s

ge_u :: Unary -> Unary -> Bool
ge_u x y := case comp_u x y of
  LT -> False
  EQ -> True
  GT -> True

all_ge :: Unary -> Sequence -> Bool
all_ge u := go where
  go :: Sequence -> Bool
  go Zero             := True
  go (OPlus xu xs xH) := ge_u u xu && go xs
</code></pre>

=== 先行研究 ===

Three Equivalent Ordinal Notation Systems in Cubical Agda ([https://arxiv.org/abs/1904.10759 [1904.10759] Three Equivalent Ordinal Notation Systems in Cubical Agda]) では、高階帰納型を含む Cubical Agda というプログラミング言語により \( \epsilon _ 0 \) を上限とする順序数表記の三通りの定義を行っている。ここでは他の順序数表記への拡張はあまり目的にされていないようであり、その際に有用となるであろう単項と加算列の分離は意味をなさない。しかし、高階帰納型による非標準形の排除、つまり私が名付けた所での「比較関数との相互再帰」が <code>MutualOrd</code> 型において行われている。さらに <code>HITOrd</code> は、高階帰納型による道の直接的な導入により、加算列を可換にすることで非標準形を根本から排除している。加算列の実態をリストではなくマルチセットにするような形である。

この論文を発見したことにより、「比較関数との相互再帰」が正しいアイデアであることが分かると同時に論文として既出であることが分かった。この論文に書かれていない「単項と加算列での相互再帰」は、カントールの標準形以上の集合論の関数を基礎とした順序数表記を型理論でもって定義しようとしたときに、誰しも自然に思い付くであろうアイデアであることを考えると、自分が初めに思い付いたと自慢できるようなものではないと思う。

=== 応用の構想 ===

「単項と加算列での相互再帰」を Agda などの適切なプログラミング言語で具体化すれば、加算列に関して必要になる比較関数と共終数と基本列の定義を共通化して、単項に関する定義に集中することが可能なのではないかと思う。このようなライブラリを作りたいが気が向かない。

== 順序数表記の設計の自由度について ==

順序数表記の設計の自由度について考察をしたい。まず、単項と加算列の構造は多くの順序数表記にみられる構造である。これに従わないのは定義を困難にするかもしれない。ちなみに、カントールの標準形は単項と加算列の構造が現れる初めての順序数表記であろう。次に、それらの不動点を取る操作でもってエプシロン・ヌルからヴェブレン関数までの一連の順序数表記が得られる。ヴェブレン関数は不動点を使う順序数表記の究極的なものであって、おそらく拡張は不可能である。

そこで順序数崩壊関数を導入する。順序数崩壊関数を元とした順序数表記の自由度は、結論として、かなりある。順序数崩壊関数には、どのくらい大きな基数を崩壊するかという尺度がある。しかし、それと別に「操作を \( \omega \) 回繰り返して」「その結果に含まれない最小の順序数を取る」という手順の際に、どのような操作を繰り返すかという自由度がある。その自由度は、 Buchholz 系においては順序数崩壊関数を \( 0 \) に適用した値の違いとなって現れる。これを底値と仮称しよう。この操作には自分自身の順序数崩壊関数（添字はより小さい）と \( x, y \mapsto x + y \) が含まれ、それ以外の操作に何があるかが重要である。なお何が Buchholz 系であるかどうかは特に定めていない。

* 何もない場合、底値は \( 1 \) である。例は Buchholz's ψ function などである。
* \( x, y \mapsto x \times y \) の場合、底値はおそらく \( 1 \) である。しかし、表記としてはかなり奇妙なものになると思われる。
* \( x, y \mapsto x \times y \) と \( x, y \mapsto x ^ y \) の場合、底値は \( \epsilon _ 0 \) である。例は Madore's ψ function などである。
* \( x \mapsto \omega ^ y \) の場合、底値は \( \epsilon _ 0 \) である。例は recasted Bachman's ψ function などである。
* \( x, y \mapsto \varphi _ x ( y ) \) の場合、底値は \( \Gamma _ 0 \) である。例は Jäger's ψ function などである。

さらに、多変数ヴェブレン関数を使えば \( \mathrm{SVO} \) となり、超限変数ヴェブレン関数を使えば \( \mathrm{LVO} \) になると思われ、おそらくこれが上限となる。ちなみに、これらの操作は別に結果が重複するようなものが同時に存在してもよく、 \( x \mapsto \omega ^ y \) と \( x, y \mapsto \varphi _ x ( y ) \) という取り合わせでもよい。その場合はどれが標準形となるか決定する作業が必要になりいささか面倒くさく無駄があるが、順序数表記としては成立するだろう。

では、 Buchholz 系ではないものにも自由度はあるのかといえば、あるだろう。例えば Feferman's θ function では到達不能基数レベルまで拡張したものが論文の上に載って発表されている。
