'''YH数列システム''' (YH sequence system, YHSS) は、私 (Hexirp) が作成した階差数列システムの一種である<ref name="assertion">筆者による主張。</ref>。より詳しく言えば、Y的数列システムの一種である<ref name="assertion" />。

<div style="display: none;"><nowiki>\[
  \newcommand{\ordinarycolon}{:}
  \newcommand{\vcentcolon}{\mathrel{\mathop\ordinarycolon}}
  \newcommand{\coloneqq}{\vcentcolon\mathrel{\mkern-1.2mu}=}
\]</nowiki></div>

== 説明 ==

YH数列システムは、順序数表記と類似した表記として定義されている<ref name="assertion" />。すなわち、 \( \mathbb{N} _ { + } \) を \( \{ x \in \mathbb{N} \mid x > 0 \} \) として \( { \mathbb{N} _ { + } } ^ { \_ < \omega } \) を \( \mathrm{T} _ \mathrm{YH} \) とする<ref name="assertion" />。 \( \mathrm{T} _ \mathrm{YH} \) の部分集合を \( \mathrm{OT} _ \mathrm{YH} \) とし、関数 \( \mathrm{tp} _ \mathrm{YH} : \mathrm{OT} _ \mathrm{YH} \rightarrow \{ 0, 1, \omega \} \) を定義する<ref name="assertion" />。順序 \( \_ < _ \mathrm{YH} \_ \) は辞書式順序により定義される<ref name="assertion" />。展開の関数が基本列としても働き、それは項 \( S \in \mathrm{OT} _ \mathrm{YH} \) と数 \( n \in \mathrm{tp} _ \mathrm{YH} ( S ) \) に対して項 \( S [ n ] _ \mathrm{YH} \in \mathrm{OT} _ \mathrm{YH} \) となる<ref name="assertion" />。 \( ( \mathrm{OT} _ \mathrm{YH}, \_ < _ \mathrm{YH} \_ ) \) は整列集合となり、順序型は巨大な可算順序数となることが期待される<ref name="assertion" />。このような形式を取ることによって、急成長階層的な構成で巨大数を作ることも、ハーディ階層的な構成で巨大数を作ることも可能になる<ref name="assertion" />。

=== 名称 ===

「YH数列システム」は、名称を変更する前は「Y数列 Hexirp 版」としていた<ref name="assertion" />。しかし、様々な思惑もあり 2020-07-05 に名称を変更することを決めた<ref name="assertion" />。この名称は yhseq が元になっている<ref name="assertion" />。

バージョンは引き継ぐため、今までのY数列 Hexirp 版 ''[version]'' は、YH数列システム ''[version]'' というように変更される<ref name="assertion" />。

=== 歴史 ===

……。

=== 定義 ===

YH数列システムの定義はバージョンによって異なる<ref name="assertion" />。詳細についてはそれぞれのページで説明し、ここでは全てのバージョンに共通する事柄だけを説明する<ref name="assertion" />。

YH数列システムの定義で特徴的なのは 0 を例外を表す値と見なしていることにある<ref name="assertion" />。 \( S \) を数列および列というが、ここでの添字は 1 始まりである；すなわち \( S = ( S _ 1, S _ 2, \ldots, S _ n ) \) である<ref name="assertion" />。また、深さなどのほとんどのパラメータが 1 始まりである<ref name="assertion" />。このような設計をしたため、 0 に例外を割り当てるのが自然なことになった<ref name="assertion" />。たとえば、親を表すときに 0 と書くと親が存在しないことを示し、階差で 0 と書くと階差が存在しない（空白である）ことを示す<ref name="assertion" />。深さが 0 になることは 2020-09-26 時点で定義されている全てのバージョン (0.0, 1.0, 1.1, 1.1.1, 2.0, 2.1, 2.0.1) においてありえない<ref name="assertion" />。

=== 山 ===

YH数列システムにおいて、全てのバージョンにおいて現れる最も重要な概念が山である<ref name="assertion" />。単純に言うと、山とは以下のように定義される三つの関数 \( \mathrm{d}, \mathrm{p}, \mathrm{a} \) のグラフ<ref group="注">[https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95_(%E9%96%A2%E6%95%B0) グラフ]を参照。</ref>である<ref name="assertion" />。

<p style="overflow: auto;"><nowiki>\begin{eqnarray*}
  \mathrm{d} _ S ( x, n ) & \coloneqq &
    \begin{cases}
      S _ x                                                                               & ( n = 1                                                                                                       ) \\
      0                                                                                   & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) = 0                                                                 ) \\
      0                                                                                   & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) = 0 \land \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) = 0 ) \\
      \mathrm{d} _ S ( x, n ^ - ) - \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) > 0 \land \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) > 0 ) \\
    \end{cases} \\
  \mathrm{p} _ S ( x, n ) & \coloneqq & \max ( \{ 0 \} \cup \{ p \in \mathbb{N} ^ + \mid p < x \land \mathrm{d} _ S ( p, n ) < \mathrm{d} _ S ( x, n ) \land \mathrm{isAnc} _ S ( x, n, \mathrm{p} ) \} ) \\
  \mathrm{isAnc} _ S ( x, n, p ) & \coloneqq &
    \begin{cases}
      \mathrm{True}                     & ( n = 1 ) \\
      p \in \mathrm{a} _ S ( x, n - 1 ) & ( n > 1 ) \\
    \end{cases} \\
  \mathrm{a} _ S ( x, n ) & \coloneqq &
    \begin{cases}
      \{ x \}                                                    & ( \mathrm{p} _ S ( x, n ) = 0 ) \\
      \{ x \} \cup \mathrm{a} _ S ( \mathrm{p} _ S ( x, n ), n ) & ( \mathrm{p} _ S ( x, n ) > 0 ) \\
    \end{cases} \\
\end{eqnarray*}</nowiki></p>

厳密に定義するならば、 \( S \) に対する山は、三つの関数 \( \mathrm{d} _ S, \mathrm{p} _ S, \mathrm{a} _ S \) のグラフであり、その定義域は \( x \) においては \( 1 \) 以上 \( S \) の長さ以下の自然数であり \( n \) においては \( 1 \) 以上の自然数である<ref name="assertion" />。もちろん、そのままでは効率が悪いためプログラムの中では配列などで表され、高速に値へとアクセスできるようになっている<ref name="assertion" />。 [[whY mountain]] において対応する概念は Mt. Fuji と呼ばれる（[https://twitter.com/koteitan/status/1280460403919601665 用例]）<ref name="survey">筆者による調査。</ref>。山という名称は whY mountain において別の意味で使われているが、こちらの方が九ヶ月ほど早い<ref name="survey" />。

三つの関数の名前や内容はバージョンによって異なることもあるが、全てのバージョンにおいてこれらの関数は現れる<ref name="assertion" />。例示した関数は 3 番目の定義であり、それ以前の定義は問題があるため破棄された<ref name="assertion" />。

==== 山の 1 番目の定義 ====

バージョン 0.0, 1.0, 1.1, 1.1.1 における定義である<ref name="assertion" />。この定義には \( \mathrm{d} _ { ( 1, 2 ) } ( 2, 3 ) \) が \( 0 \) にならないという問題がある<ref name="2019-10-30">[[ユーザー:Hexirp]]、[[ユーザーブログ:Hexirp/(2019-10-30)_Y数列_Hexirp_版のバグが発見]]。</ref>。

<p style="overflow: auto;"><nowiki>\begin{eqnarray*}
  \mathrm{d} _ S ( x, n ) & \coloneqq &
    \begin{cases}
      S _ x                                                                               & ( n = 1                                       ) \\
      0                                                                                   & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) = 0 ) \\
      \mathrm{d} _ S ( x, n ^ - ) - \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) > 0 ) \\
    \end{cases} \\
  \mathrm{p} _ S ( x, n ) & \coloneqq & \max ( \{ 0 \} \cup \{ p \in \mathbb{N} ^ + \mid p < x \land \mathrm{d} _ S ( p, n ) < \mathrm{d} _ S ( x, n ) \land \mathrm{isAnc} _ S ( x, n, \mathrm{p} ) \} ) \\
  \mathrm{isAnc} _ S ( x, n, p ) & \coloneqq &
    \begin{cases}
      \mathrm{True}                     & ( n = 1 ) \\
      p \in \mathrm{a} _ S ( x, n - 1 ) & ( n > 1 ) \\
    \end{cases} \\
  \mathrm{a} _ S ( x, n ) & \coloneqq &
    \begin{cases}
      \emptyset                                                  & ( x = 0 ) \\
      \{ x \} \cup \mathrm{a} _ S ( \mathrm{p} _ S ( x, n ), n ) & ( x > 0 ) \\
    \end{cases} \\
\end{eqnarray*}</nowiki></p>

==== 山の 2 番目の定義 ====

バージョン 2.0, 2.1 における定義である<ref name="assertion" />。この定義には再帰のために計算途中で \( \mathrm{a} _ S ( x, n ) \) の \( x \) が \( 0 \) となってしまうという問題があった<ref name="assertion" />。これは些細な問題であるが、メモ化の際に障害となった<ref name="assertion" />。

<p style="overflow: auto;"><nowiki>\begin{eqnarray*}
  \mathrm{d} _ S ( x, n ) & \coloneqq &
    \begin{cases}
      S _ x                                                                               & ( n = 1                                                                                                       ) \\
      0                                                                                   & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) = 0                                                                 ) \\
      0                                                                                   & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) = 0 \land \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) = 0 ) \\
      \mathrm{d} _ S ( x, n ^ - ) - \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) & ( n > 1 \land \mathrm{p} _ S ( x, n ^ - ) > 0 \land \mathrm{d} _ S ( \mathrm{p} _ S ( x, n ^ - ), n ^ - ) > 0 ) \\
    \end{cases} \\
  \mathrm{p} _ S ( x, n ) & \coloneqq & \max ( \{ 0 \} \cup \{ p \in \mathbb{N} ^ + \mid p < x \land \mathrm{d} _ S ( p, n ) < \mathrm{d} _ S ( x, n ) \land \mathrm{isAnc} _ S ( x, n, \mathrm{p} ) \} ) \\
  \mathrm{isAnc} _ S ( x, n, p ) & \coloneqq &
    \begin{cases}
      \mathrm{True}                     & ( n = 1 ) \\
      p \in \mathrm{a} _ S ( x, n - 1 ) & ( n > 1 ) \\
    \end{cases} \\
  \mathrm{a} _ S ( x, n ) & \coloneqq &
    \begin{cases}
      \emptyset                                                  & ( x = 0 ) \\
      \{ x \} \cup \mathrm{a} _ S ( \mathrm{p} _ S ( x, n ), n ) & ( x > 0 ) \\
    \end{cases} \\
\end{eqnarray*}</nowiki></p>

=== Y数列 Hexirp 版 ===

Y数列 Hexirp 版は、YH数列システムの古い呼び方である<ref name="assertion" />。呼び方を変更すると同時に、その目標も僅か変えたため、厳密にはYH数列システムとは区別されるかもしれない<ref name="assertion" />。この節では、Y数列 Hexirp 版と呼んでいた時の事柄について説明する<ref name="assertion" />。

2018年6月15日、Y数列がゆきと氏により考案されて以降、Y数列についての研究が進められてきた<ref name="assertion" />。ゆきと氏による公式の定義は存在せず、しかし展開の例は豊富に存在するという状態が長らく続いていた<ref name="assertion" />。

そのため、Y数列の定義を目指して様々な試みが行われた<ref name="assertion" /><ref name="2019-10-14">[[ユーザー:Hexirp]]、[[ユーザーブログ:Hexirp/Y数列_Hexirp_版]]。</ref>。これらの試みはゆきと氏の意思もあって本家のY数列とは区別できるように名前が付けられていたものの、本家のY数列の展開の例と合致することを目指しているという点でY数列の定義を成す試みだと言えた<ref name="assertion" /><ref name="2019-10-14" />。

その中で私もY数列 Hexirp 版という表記群を作成していた（[[ユーザーブログ:Hexirp/Y数列_Hexirp_版|リンク]]）<ref name="assertion" />。この表記の特徴は「Y数列の定義を作る」と「美しい定義を作る」という二つの目標を両立できるように複数のバージョンを作成していたことにある<ref name="assertion" />。

2020年6月末、Y数列の展開が変更された<ref name="2020-07-08">[[ユーザー:Hexirp]]、[[ユーザーブログ:Hexirp/(2020-07-08)_Y数列]]。</ref>。これにより p進大好きbot 氏がY数列への追随を断念することをツイートする（[https://twitter.com/non_archimedean/status/1278629588134883328 リンク]）などの影響があった<ref name="survey" />。Y数列 Hexirp 版は、元々のY数列に合わせていたバージョン 2.1 の展開がY数列の展開と異なるものになったが、美しさを優先して意図的にY数列と異なる展開になるようにしていたバージョン 2.0 の展開が新しいY数列の展開と一致していたため無問題であった<ref name="assertion" />。

2020年の5月から7月まで、Y数列の研究が活発になり、本家の展開の変更に繋がっている<ref name="assertion" />。また、この件に関連してY数列 Hexirp 版が話題になることも増えた<ref name="assertion" />。これらの状況により、私はY数列 Hexirp 版 3.0 を作成しようと考えた<ref name="assertion" />。Y数列 Hexirp 版 3.0 は、今まで未完成であった \( (1,3) \) 以上への展開を記述することを目標としていた<ref name="assertion" />。

以上の出来事をきっかけとして、Y数列 Hexirp 版 3.0 の開発中にYH数列システムへと名称の変更が行われた<ref name="assertion" />。YH数列システムでは、「美しい定義を作る」ことが「Y数列の定義を作る」ことよりも優先されることになる<ref name="assertion" />。

=== yhseq ===

yhseq は、YH数列システムをプログラムで定義するプロジェクトである<ref name="assertion" />。 GitHub にホストされていて（[https://github.com/Hexirp/yhseq リンク]）、 Haskell で書かれている<ref name="assertion" />。 stack というツールで簡単に実行できるということを売りにしていたが、その期待に反して、2020年7月23日現在、コンパイルして実行した人は Koteitan 氏しか確認できていない<ref name="assertion" />。

# git と stack をインストールする<ref name="assertion" />。
# <code>git clone git@github.com:Hexirp/yhseq.git</code> という風に、リポジトリをクローンする<ref name="assertion" />。
# <code>cd yhseq</code> という風に、リポジトリのルートディレクトリに入る<ref name="assertion" />。
# <code>stack build</code> という風に、プロジェクトをビルドする<ref name="assertion" />。
# <code>stack exec -- yhseq [1,2,4,8,10,8] 3</code> という風に、プロジェクトを実行する<ref name="assertion" />。
# <code>[1,2,4,8,10,7,12,14,11,17,19,16,23,25]</code> というような出力を得る<ref name="assertion" />。

名称は、Y数列 Hexirp 版に由来する<ref name="assertion" />。Y数列 Hexirp 版を英語に訳すると Y sequence Hexirp edition となる<ref name="assertion" />。これを縮めると Y Seq H E という感じになるが、これでは格好悪いので H を前に持ってきて YHSeq とした<ref name="assertion" />。

== バージョン ==

YH数列システムのバージョンは複数ある。

{| class="wikitable"
! バージョン名
! 発表日
! 上限<ref group="注">定義の対象となる数列の上限は何か。</ref>
! 定義は？<ref group="注">展開が定義できているかどうか。</ref>
! 挙動は？<ref group="注">順序数表記として正しいかどうか。</ref>
! 補足
|-
| 0.0<ref name="2019-10-14" />
| 2019-09-04<ref name="2019-10-14" />
| \( ( 1, \omega ) \)<ref name="2019-10-14" />
| false<ref name="2019-10-14" /><ref name="2019-10-30" />
| false<ref name="obvious">自明。</ref>
| ……。
|-
| 1.0<ref name="2019-10-14" />
| 2019-10-14<ref name="2019-10-14" />
| \( ( 1, 3 ) \)<ref name="2019-10-14" />
| false<ref name="2019-10-14" /><ref name="2019-10-30" />
| false<ref name="obvious" />
| ……。
|-
| 1.1<ref name="2019-10-14" />
| 2019-10-15<ref name="2019-10-14" />
| \( ( 1, 3 ) \)<ref name="2019-10-14" />
| false<ref name="2019-10-14" /><ref name="2019-10-30" />
| false<ref name="obvious" />
| ……。
|-
| 1.1.1<ref name="2019-10-14" />
| 2019-10-31<ref name="2019-10-14" />
| \( ( 1, 3 ) \)<ref name="2019-10-14" />
| false<ref name="2019-10-14" /><ref name="2019-10-30" />
| false<ref name="obvious" />
| 計算結果は 1.1 と同じ<ref name="assertion" />。
|-
| 2.0<ref name="2019-10-14" />
| 2019-12-02<ref name="2019-10-14" />
| \( ( 1, 3 ) \)<ref name="2019-10-14" />
| true<ref name="assertion" />
| unknown<ref name="assertion" />
| ……。
|-
| 2.0.1<ref name="2020-08-27">Hexirp (2020-08-27). [https://googology.wikia.org/ja/wiki/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%96%E3%83%AD%E3%82%B0:Hexirp/(2020-08-27)_YHSS_2.0.1_%E5%AE%8C%E6%88%90 "(2020-08-27) YHSS 2.0.1 完成"]. ''巨大数研究 Wiki''. Retrieved 2020-09-26.</ref>
| 2020-08-27<ref name="assertion" />
| \( ( 1, 3 ) \)<ref name="2020-08-27" />
| true<ref name="assertion" />
| unknown<ref name="assertion" />
| 計算結果は 2.0 と同じ<ref name="assertion" />。
|-
| 2.1<ref name="2019-10-14" />
| 2019-12-02<ref name="2019-10-14" />
| \( ( 1, 3 ) \)<ref name="2019-10-14" />
| true<ref name="assertion" />
| false<ref name="2020-07-03">[[ユーザー:Hexirp]]、[[ユーザーブログ:Hexirp/(2020-07-03)_Y数列_Hexirp_版_2.1_の無限ループ]]。</ref>
| ……。
|}

=== バージョン 0.0 ===

YH数列システム 0.0 は、Y数列の形式化への初めての試みである<ref name="assertion" /><ref name="2019-10-14" />。致命的なバグが見つかり放棄することになったが、 DPN 形式の初めての形式化として意義はあったと考える<ref name="assertion" />。数式による定義は[[ユーザーブログ:Hexirp/Y数列 Hexirp 版 0.0]] にある<ref name="2019-10-14" />。

この定義では、当時のY数列の展開と \( (1,2,4,8,10,8) \) で一致しないという問題があった<ref name="assertion" />。当時の私はY数列の定義として公開していたが、それはゆきと氏の意思にそぐわないため削除するべきものであった<ref name="2019-10-14" />。しかしながら、それでも定義が自然なものであるように見えたため、私はゆきと氏にY数列 Hexirp 版という形で公開をしてもよいか尋ね、許可をもらったため、その形で公開することになった<ref name="2019-10-14" />。

2019年9月4日、巨大数研究 Wiki で数式による定義を公開した<ref name="2019-10-14" />。

2019年9月9日、[https://twitter.com/koteitan/status/1170892662230175745 一連のツイート]で致命的なバグが発見された<ref name="survey" /><ref name="2019-10-14" />。このバグは「飛ばない山バグ」と言うべきものであり、展開の時に山が飛ぶ \( (1,3,4,2,5,6,5) \) において途中で不整合が起きて計算できなくなる<ref name="2019-10-14" />。私は、このバグのためバージョン 0.0 は \( (1,3) \) 以降では定義できていないとした<ref name="2019-10-14" />。

2019年10月29日、YH数列システムのプログラム化プロジェクト yhseq の実装途中において致命的なバグが発見された<ref name="2019-10-30" />。このバグは「底なし山バグ」というべきものであり、これにより \( T _ S \) の計算が停止しなくなるため \( (1,2) \) 以降の数列において定義できていないことが分かった<ref name="2019-10-30" /><ref name="2019-10-14" />。

=== バージョン 1.0 ===

YH数列システム 1.0 は、まだ粗削りであったYH数列システム 0.0 を清書したものである<ref name="assertion" /><ref name="2019-10-14" />。多くの関数の定義が整理され、様々な間違いが修正され、まだ完全ではないクラスが 2 以上の数列に対する展開の定義が取り除かれた<ref name="assertion" /><ref name="2019-10-14" />。そのため、このバージョンは繰り返し展開していくのならば \( (1,3) \) 未満にしか定義されていない<ref name="assertion" /><ref name="2019-10-14" />。数式による定義は[[ユーザーブログ:Hexirp/Y数列 Hexirp 版 1.0]] にある<ref name="2019-10-14" />。

当時のY数列の展開と \( (1,2,4,8,10,8) \) で一致しないことに対しては、清書を第一として何らかの修正を行おうとはしなかった<ref name="assertion" />。この問題の修正はバージョン 1.1 で試みられることになる<ref name="assertion" />。

2019年10月14日、巨大数研究 Wiki で数式による定義を公開した<ref name="2019-10-14" />。

2019年10月29日、YH数列システムのプログラム化プロジェクト yhseq の実装途中において致命的なバグが発見された<ref name="2019-10-30" />。このバグは「底なし山バグ」というべきものであり、これにより \( T _ S \) の計算が停止しなくなるため \( (1,2) \) 以降の数列において定義できていないことが分かった<ref name="2019-10-30" /><ref name="2019-10-14" />。

=== バージョン 1.1 ===

YH数列システム 1.1 は、YH数列システムのバージョン 0.0 および 1.0 の想定する展開が当時のY数列の展開と異なっていたのを、Y数列の展開に合わせようと修正を行ったものである<ref name="assertion" /><ref name="2019-10-14" />。親がずれるかどうかの判定方法を変更したことにより、一致するようになるとしていたが、バグが発見されたことにより有耶無耶となった<ref name="2019-10-14" />。数式による定義は[[ユーザーブログ:Hexirp/Y数列 Hexirp 版 1.1]] にある<ref name="2019-10-14" />。

; 当時のY数列の展開<ref name="assertion" />
: \( (1,2,4,8,10,8)[3] = (1,2,4,8,10,7,12,15,11,17,21,16,23,28) \)<ref name="assertion" />
; YH数列システム 0.0 および 1.0 が想定する展開<ref name="assertion" />
: \( (1,2,4,8,10,8)[3] = (1,2,4,8,10,7,12,14,11,17,19,16,23,25) \)<ref name="assertion" />

現在ではY数列の展開が \( (1,2,4,8,10,8)[3] = (1,2,4,8,10,7,12,14,11,17,19,16,23,25) \) となっている<ref name="2020-07-08" />。

2019年10月14日、巨大数研究 Wiki で数式による定義を公開した<ref name="2019-10-14" />。

2019年10月29日、YH数列システムのプログラム化プロジェクト yhseq の実装途中において致命的なバグが発見された<ref name="2019-10-30" />。このバグは「底なし山バグ」というべきものであり、これにより \( T _ S \) の計算が停止しなくなるため \( (1,2) \) 以降の数列において定義できていないことが分かった<ref name="2019-10-30" /><ref name="2019-10-14" />。

2019年10月30日、 yhseq での実装が完成した<ref name="2019-10-14" />。

=== バージョン 1.1.1 ===

YH数列システム 1.1.1 は yhseq の実装過程において単純化できる部分がいくつか見つかったため、その部分の単純化をプログラムにおいて行ったバージョンとなる<ref name="assertion" />。その経緯からプログラムでの実装が最初に作られており、数式での定義はプログラムから翻訳するという形で作成された<ref name="assertion" />。数式による定義は[[ユーザーブログ:Hexirp/Y数列 Hexirp 版 1.1.1]] にある<ref name="2019-10-14" />。

2019年10月29日、YH数列システムのプログラム化プロジェクト yhseq の実装途中において致命的なバグが発見された<ref name="2019-10-30" />。このバグは「底なし山バグ」というべきものであり、これにより \( T _ S \) の計算が停止しなくなるため \( (1,2) \) 以降の数列において定義できていないことが分かった<ref name="2019-10-30" /><ref name="2019-10-14" />。

2019年10月31日、 yhseq での実装が完成した<ref name="2019-10-14" />。

2019年11月2日、巨大数研究 Wiki で数式による定義を公開した<ref name="2019-10-14" />。

=== バージョン 2.0 ===

YH数列システム 2.0 は、YH数列システムのバージョン 1.0 と 1.1.1 の定義を引き継ぎながらも、底なし山バグを修正したものである<ref name="assertion" />。ここでようやく \( (1,3) \) 未満の数列において定義できていると十分な根拠を持って言えるようになった<ref name="assertion" />。バージョン 2.1 とは並列しているが、かつてはY数列の展開に一致しているのは 2.1 の方であるとしていた<ref name="assertion" />。数式による定義は[[ユーザーブログ:Hexirp/Y数列 Hexirp 版 2.0]] にある<ref name="2019-10-14" />。

2019年11月3日、 yhseq での実装が完成した<ref name="2019-10-14" />。

2019年12月2日、巨大数研究 Wiki で数式による定義を公開した<ref name="2019-10-14" />。

=== バージョン 2.1 ===

YH数列システム 2.0 は、YH数列システムのバージョン 1.1 と 1.1.1 の定義を引き継ぎながらも、底なし山バグを修正したものである<ref name="assertion" />。ここでようやく \( (1,3) \) 未満の数列において定義できていると十分な根拠を持って言えるようになった<ref name="assertion" />。バージョン 2.0 とは並列しているが、かつてはY数列の展開に一致しているのは 2.1 の方であるとしていた<ref name="assertion" />。数式による定義は[[ユーザーブログ:Hexirp/Y数列 Hexirp 版 2.1]] にある<ref name="2019-10-14" />。

2019年11月4日、 yhseq での実装が完成した<ref name="2019-10-14" />。

2019年12月2日、巨大数研究 Wiki で数式による定義を公開した<ref name="2019-10-14" />。

2020年7月3日、無限ループが発見された<ref name="2020-07-03" />。

=== バージョン 2.0.1 ===

YH数列システム 2.0.1 は、YH数列システムのバージョン 2.0 と同じ計算結果になるようにしながらも、プログラムを大幅に再構成したものである。バージョン 2.0 ではリストの結合を使っているが、それではバージョン 3.0 における処理を実装することが困難だと分かったため、配列をベースに据えるように書き直し、バージョン 2.0.1 を作成した<ref name="2020-08-27" />。

2020年08月27日、 yhseq での実装が完成した<ref name="2020-08-27" />。

== 注釈 ==

<references group="注" />

== 出典 ==

<references />
