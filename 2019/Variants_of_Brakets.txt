Gaoji 氏により、三元括弧という興味深い概念が開発されている。それを受理するオートマトンを考案することで研究に資したい。

== オートマトンについて ==

オートマトンは抽象的な機械である。チューリングマシンもその一種である。さらにセル・オートマトンなど、様々な種類がある。

言語を定義するには、一つに文法を定める方法がある。しかし、それを受理するオートマトン（文法的に正しい文章か判定するオートマトン）を定義する方法もある。この二つの手法は互いに関連しあっており、例えば正規文法と有限オートマトンが対応している。

二元括弧と呼ばれるもの、すなわち通常の括弧のみで成り立つ文を受理するオートマトンはプッシュダウンオートマトンというもので書くことができる。たとえば https://blog.tiqwab.com/2017/03/12/pushdown-automaton.html で、そのものずばりの括弧を受理するオートマトンが例として挙げられている。

プッシュダウンオートマトンは、単純に言えばスタック付きの有限オートマトンである。

山本真基『オートマトンと言語理論』というテキストを参考にして Haskell で表現してみよう。

<pre>
newtype PDATransit state input_alphabet stack_alphabet = PFATransit ((state, Maybe input_alphabet, Maybe stack_alphabet) -> Set (state, Maybe stack_alphabet))

data PDA state input_alphabet stack_alphabet = PDA (PDATransit state input_alphabet stack_alphabet) state (Set state)

runPDATransit :: PDATransit state input_alphabet stack_alphabet -> state -> [input_alphabet] -> [stack_alphabet] -> [(state, [stack_alphabet])]
runPDATransit (PDATransit delta) = go where
  go q input stack =
    case input of
      [] -> case stack of
        [] -> do
          (q', stack_push') <- S.toList $ delta (q, Nothing, Nothing)
          case stack_push' of
            Nothing -> pure (q', [])
            Just stack_push -> pure (q', stack_push : [])
        stack_pop : stack_rest -> do
          (q', stack_push') <- S.toList $ delta (q, Nothing, Just stack_pop)
          case stack_push' of
            Nothing -> pure (q', stack_rest)
            Just stack_push -> pure (q', stack_push : stack_rest)
      input_pop : input_rest -> case stack of
        [] -> do
          (q', stack_push') <- S.toList $ delta (q, Just input_pop, Nothing)
          case stack_push' of
            Nothing -> go q' input_rest []
            Just stack_push -> go q' input_rest (stack_push : [])
        stack_pop : stack_rest -> do
          (q', stack_push') <- S.toList $ delta (q, Just input_pop, Just stack_pop)
          case stack_push' of
            Nothing -> go q' input_rest stack_rest
            Just stack_push -> go q' input_rest (stack_push : stack_rest)

runPDA :: PDA state input_alphabet stack_alphabet -> [input_alphabet] -> [(state, [stack_alphabet])]
runPDA (PDA delta q_0 q_f) input = runPDATransit delta q_0 input []

matchPDA :: [input_alphabet] -> PDA state input_alphabet stack_alphabet -> Bool
matchPDA input (PDA delta q_0 q_f) = any (\(q, _) -> S.member q q_f) $ runPDA (PDA delta q_0 q_f) input
</pre>

== 二元カッコ ==

このように表される。

<pre>
1 > <
  (, /0
2
  (, /0
  ), 0/
</pre>

つまり、上のコードに沿うと下のようになる。

<pre>
data State = One | Two

data InputAlphabet = Left | Right

data StackAlphabet = Zero

delta :: PDATransit State InputAlphabet StackAlphabet
delta = PDATransit $ \(state, input_pop', stack_pop') ->
  case state of
    case input_pop' of
      Nothing -> case stack_pop' of
        Nothing ->
</pre>
