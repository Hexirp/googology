(** * ブラウワー順序数と順序数崩壊関数 *)

(** ブラウワー順序数と順序数崩壊関数について記述します。 *)

(** ここでは、計算可能な形で定義するために、プログラムとして構成可能であるように注意を払います。別の表現で言い換えれば、構成主義数学の範囲に収まるようにします。 *)

(** ** 設定 *)

(** << ltac_plugin >> を読み込みます。証明戦術を使えるようにします。 *)

Declare ML Module "ltac_plugin" .

(** << Default Proof Mode >> を << Classic >> に設定します。 *)

Global Set Default Proof Mode "Classic" .

(** << Default Goal Selector >> を << ! >> に設定します。ただ一つの目標を指定している時にだけ証明戦術が働くようにします。 *)

Global Set Default Goal Selector "!" .

(** << Elimination Schemes >> をオフにします。除去関数を独自に定義するため、除去関数の自動生成をオフにします。 *)

Global Unset Elimination Schemes .

(** << Universe Polymorphism >> をオンにします。宇宙多相を使えるようにします。 *)

Global Set Universe Polymorphism .

(** << Polymorphic Inductive Cumulativity >> をオンにします。 *)

Global Set Polymorphic Inductive Cumulativity .

(** << Printing Universes >> をオンにします。 *)

Global Set Printing Universes .

(** ** 旧来のブラウワー順序数 *)

(** 旧来のブラウワー順序数の定義を簡単に紹介します。 *)

Module 旧来のブラウワー順序数 .

(** ブラウワー順序数を定義します。 *)

(** ブラウワー順序数は、「ゼロ」と「甲の後者」と「甲の上限」を構築子に持つ帰納型です。ここで、「甲」とは変数です。 *)

(** 「ゼロ」と「甲の後者」だけならば自然数の定義と同じですが、ブラウワー順序数は「甲の上限」も構築子に含みます。「甲の上限」は、自然数からブラウワー順序数への関数を受け取り、ブラウワー順序数を作り出す構築子です。 *)

(** 「甲の上限」は、その名の通り、「甲」という列の上限として取り扱います。「甲」は自然数からブラウワー順序数への関数であり、これは自然数を添字に持つブラウワー順序数の列として見做すことができます。 *)

Inductive ブラウワー順序数@{ i | } : Type@{ i }
  :=
    ゼロの構築子 : ブラウワー順序数
    |
    後者の構築子 : ブラウワー順序数 -> ブラウワー順序数
    |
    上限の構築子 : ( nat -> ブラウワー順序数 ) -> ブラウワー順序数
.

(** 自然数からブラウワー順序数へ埋め込む写像を定義します。 *)

(** 「ゼロ」と「甲の後者」をそのまま用いて定義することができます。これは、自然数の構築子の集合をブラウワー順序数の構築子の集合が包含しているためです。 *)

Fixpoint 自然数からブラウワー順序数への埋め込み@{ i | } ( 対象 : nat ) { struct 対象 } : ブラウワー順序数@{ i }
  :=
    match
      対象
    with
      0 => ゼロの構築子@{ i }
      |
      S 対象_前者 => 後者の構築子@{ i } ( 自然数からブラウワー順序数への埋め込み 対象_前者 )
    end
.

(** オメガを定義します。 *)

(** 自然数からブラウワー順序数へ埋め込む写像を、自然数を添字に持つブラウワー順序数の列として見做すことで、その上限を考えることができ、それは最小の無限順序数となり、すなわち << ω >> です。 *)

(** このようにして、自然数を添字に持つブラウワー順序数の列の上限を取ることで、様々な順序数を構築することができます。このため、 Coq としての制約を除けば、ありとあらゆる再帰順序数を構築することができることになります。 *)

Definition オメガ@{ i | } : ブラウワー順序数@{ i } := 上限の構築子@{ i } 自然数からブラウワー順序数への埋め込み@{ i } .

End 旧来のブラウワー順序数 .

Module 複数の段階を有するブラウワー順序数 .

Module ゼロ番目のブラウワー順序数 .

Inductive ゼロ番目のブラウワー順序数@{ i | } : Type@{ i } := .

Definition 場合分け@{ i | } : forall 目標 : Type@{ i } , ゼロ番目のブラウワー順序数@{ i } -> 目標
  := fun 目標 : Type@{ i } => fun 対象 : ゼロ番目のブラウワー順序数@{ i } => match 対象 with end
.

End ゼロ番目のブラウワー順序数 .

Definition ゼロ番目のブラウワー順序数@{ i | } : Type@{ i }
  := ゼロ番目のブラウワー順序数.ゼロ番目のブラウワー順序数@{ i }
.

Module 一番目のブラウワー順序数 .

Inductive 一番目のブラウワー順序数@{ i | } : Type@{ i }
  := ゼロ番目の構築子 : ( ゼロ番目のブラウワー順序数@{ i } -> 一番目のブラウワー順序数 ) -> 一番目のブラウワー順序数
.

Definition 場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    ( ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    一番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fix a ( 対象 : 一番目のブラウワー順序数@{ i } ) { struct 対象 } : 目標
      :=
        match
          対象
        with
          ゼロ番目の構築子 対象_ゼロ番目の列
          =>
          ゼロ番目の構築子の処理 ( fun 添字 : ゼロ番目のブラウワー順序数@{ i } => a ( 対象_ゼロ番目の列 添字 ) )
        end
.

Definition 簡易版の場合分け@{ i | }
  : forall 目標 : Type@{ i } , 目標 -> 一番目のブラウワー順序数@{ i } -> 目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : 目標 =>
    場合分け@{ i }
      目標
      ( fun 対象_ゼロ番目の列 : ゼロ番目のブラウワー順序数@{ i } -> 目標 => ゼロ番目の構築子の処理 )
.

Definition ゼロ番目のブラウワー順序数を埋め込む@{ i | }
  : ゼロ番目のブラウワー順序数@{ i } -> 一番目のブラウワー順序数@{ i }
  := ゼロ番目のブラウワー順序数.場合分け@{ i } 一番目のブラウワー順序数@{ i }
.

Definition ゼロ@{ i | } : 一番目のブラウワー順序数@{ i }
  := ゼロ番目の構築子@{ i } ( ゼロ番目のブラウワー順序数.場合分け@{ i } 一番目のブラウワー順序数@{ i } )
.

End 一番目のブラウワー順序数 .

Definition 一番目のブラウワー順序数@{ i | } : Type@{ i }
  := 一番目のブラウワー順序数.一番目のブラウワー順序数@{ i }
.

Module 二番目のブラウワー順序数 .

Inductive 二番目のブラウワー順序数@{ i | } : Type@{ i }
  :=
    ゼロ番目の構築子 : ( ゼロ番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数 ) -> 二番目のブラウワー順序数
    |
    一番目の構築子 : ( 一番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数 ) -> 二番目のブラウワー順序数
.

Definition 場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    ( ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    二番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 一番目の構築子の処理 : ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fix a ( 対象 : 二番目のブラウワー順序数@{ i } ) { struct 対象 } : 目標
      :=
        match
          対象
        with
          ゼロ番目の構築子 対象_ゼロ番目の列
          =>
          ゼロ番目の構築子の処理 ( fun 添字 : ゼロ番目のブラウワー順序数@{ i } => a ( 対象_ゼロ番目の列 添字 ) )
          |
          一番目の構築子 対象_一番目の列
          =>
          一番目の構築子の処理 ( fun 添字 : 一番目のブラウワー順序数@{ i } => a ( 対象_一番目の列 添字 ) )
        end
.

Definition 簡易版の場合分け@{ i | }
  : forall 目標 : Type@{ i } , 目標 -> ( 目標 -> 目標 ) -> 二番目のブラウワー順序数@{ i } -> 目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : 目標 =>
    fun 一番目の構築子の処理 : 目標 -> 目標 =>
    場合分け@{ i }
      目標
      ( fun 対象_ゼロ番目の列 : ゼロ番目のブラウワー順序数@{ i } -> 目標 => ゼロ番目の構築子の処理 )
      (
        fun 対象_一番目の列 : 一番目のブラウワー順序数@{ i } -> 目標 =>
        一番目の構築子の処理 ( 対象_一番目の列 一番目のブラウワー順序数.ゼロ@{ i } )
      )
.

Definition ゼロ番目のブラウワー順序数を埋め込む@{ i | }
  : ゼロ番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i }
  := ゼロ番目のブラウワー順序数.場合分け@{ i } 二番目のブラウワー順序数@{ i }
.

Definition ゼロ@{ i | } : 二番目のブラウワー順序数@{ i }
  := ゼロ番目の構築子@{ i } ( ゼロ番目のブラウワー順序数.場合分け@{ i } 二番目のブラウワー順序数@{ i } )
.

Definition 一番目のブラウワー順序数を埋め込む@{ i | }
  : 一番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i }
  := 一番目のブラウワー順序数.場合分け@{ i } 二番目のブラウワー順序数@{ i } ゼロ番目の構築子@{ i }
.

Definition 後者関数@{ i | } : 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i }
  :=
    fun x : 二番目のブラウワー順序数@{ i } =>
    一番目の構築子@{ i } ( 一番目のブラウワー順序数.簡易版の場合分け@{ i } 二番目のブラウワー順序数@{ i } x )
.

Definition 加算@{ i | }
  : 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i }
  :=
    fun x : 二番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i } 二番目のブラウワー順序数@{ i } x 後者関数@{ i }
.

Definition 乗算@{ i | }
  : 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i }
  :=
    fun x : 二番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      二番目のブラウワー順序数@{ i }
      ゼロ@{ i }
      ( fun a_前者 : 二番目のブラウワー順序数@{ i } => 加算@{ i } a_前者 x )
.

Definition 冪乗@{ i | }
  : 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i } -> 二番目のブラウワー順序数@{ i }
  :=
    fun x : 二番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      二番目のブラウワー順序数@{ i }
      ( 後者関数@{ i } ゼロ@{ i } )
      ( fun a_前者 : 二番目のブラウワー順序数@{ i } => 乗算@{ i } a_前者 x )
.

End 二番目のブラウワー順序数 .

Definition 二番目のブラウワー順序数@{ i | } : Type@{ i }
  := 二番目のブラウワー順序数.二番目のブラウワー順序数@{ i }
.

Module 三番目のブラウワー順序数 .

Inductive 三番目のブラウワー順序数@{ i | } : Type@{ i }
  :=
    ゼロ番目の構築子 : ( ゼロ番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数 ) -> 三番目のブラウワー順序数
    |
    一番目の構築子 : ( 一番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数 ) -> 三番目のブラウワー順序数
    |
    二番目の構築子 : ( 二番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数 ) -> 三番目のブラウワー順序数
.

Definition 場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    ( ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    三番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 一番目の構築子の処理 : ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 二番目の構築子の処理 : ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fix a ( 対象 : 三番目のブラウワー順序数@{ i } ) { struct 対象 } : 目標
      :=
        match
          対象
        with
          ゼロ番目の構築子 対象_ゼロ番目の列
          =>
          ゼロ番目の構築子の処理 ( fun 添字 : ゼロ番目のブラウワー順序数@{ i } => a ( 対象_ゼロ番目の列 添字 ) )
          |
          一番目の構築子 対象_一番目の列
          =>
          一番目の構築子の処理 ( fun 添字 : 一番目のブラウワー順序数@{ i } => a ( 対象_一番目の列 添字 ) )
          |
          二番目の構築子 対象_二番目の列
          =>
          二番目の構築子の処理 ( fun 添字 : 二番目のブラウワー順序数@{ i } => a ( 対象_二番目の列 添字 ) )
        end
.

Definition 簡易版の場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    目標
    ->
    ( 目標 -> 目標 )
    ->
    ( ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    三番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : 目標 =>
    fun 一番目の構築子の処理 : 目標 -> 目標 =>
    fun 二番目の構築子の処理 : ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    場合分け@{ i }
      目標
      ( fun 対象_ゼロ番目の列 : ゼロ番目のブラウワー順序数@{ i } -> 目標 => ゼロ番目の構築子の処理 )
      (
        fun 対象_一番目の列 : 一番目のブラウワー順序数@{ i } -> 目標 =>
        一番目の構築子の処理 ( 対象_一番目の列 一番目のブラウワー順序数.ゼロ@{ i } )
      )
      二番目の構築子の処理
.

Definition ゼロ番目のブラウワー順序数を埋め込む@{ i | }
  : ゼロ番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  := ゼロ番目のブラウワー順序数.場合分け@{ i } 三番目のブラウワー順序数@{ i }
.

Definition ゼロ@{ i | } : 三番目のブラウワー順序数@{ i }
  := ゼロ番目の構築子@{ i } ( ゼロ番目のブラウワー順序数.場合分け@{ i } 三番目のブラウワー順序数@{ i } )
.

Definition 一番目のブラウワー順序数を埋め込む@{ i | }
  : 一番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  := 一番目のブラウワー順序数.場合分け@{ i } 三番目のブラウワー順序数@{ i } ゼロ番目の構築子@{ i }
.

Definition 後者関数@{ i | } : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    fun x : 三番目のブラウワー順序数@{ i } =>
    一番目の構築子@{ i } ( 一番目のブラウワー順序数.簡易版の場合分け@{ i } 三番目のブラウワー順序数@{ i } x )
.

Definition 加算@{ i | }
  : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    fun x : 三番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i } 三番目のブラウワー順序数@{ i } x 後者関数@{ i } 二番目の構築子@{ i }
.

Definition 乗算@{ i | }
  : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    fun x : 三番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      三番目のブラウワー順序数@{ i }
      ゼロ@{ i }
      ( fun a_前者 : 三番目のブラウワー順序数@{ i } => 加算@{ i } a_前者 x )
      二番目の構築子@{ i }
.

Definition 冪乗@{ i | }
  : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    fun x : 三番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      三番目のブラウワー順序数@{ i }
      ( 後者関数@{ i } ゼロ@{ i } )
      ( fun a_前者 : 三番目のブラウワー順序数@{ i } => 乗算@{ i } a_前者 x )
      二番目の構築子@{ i }
.

Definition 二番目のブラウワー順序数を埋め込む@{ i | }
  : 二番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    二番目のブラウワー順序数.場合分け@{ i }
      三番目のブラウワー順序数@{ i }
      ゼロ番目の構築子@{ i }
      一番目の構築子@{ i }
.

Definition 繰り返し適用の強上限@{ i | }
  :
    三番目のブラウワー順序数@{ i }
    ->
    ( 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } )
    ->
    三番目のブラウワー順序数@{ i }
  :=
    fun x : 三番目のブラウワー順序数@{ i } =>
    fun f : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } =>
    二番目の構築子@{ i } ( 二番目のブラウワー順序数.簡易版の場合分け@{ i } 三番目のブラウワー順序数@{ i } x f )
.

Definition オメガ@{ i | } : 三番目のブラウワー順序数@{ i }
  := 繰り返し適用の強上限@{ i } ( 後者関数@{ i } ( 後者関数@{ i } ゼロ@{ i } ) ) 後者関数@{ i }
.

Definition オメガ冪@{ i | } : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  := 冪乗@{ i } オメガ@{ i }
.

Definition エプシロン数@{ i | } : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    簡易版の場合分け@{ i }
      三番目のブラウワー順序数@{ i }
      ( 繰り返し適用の強上限@{ i } オメガ@{ i } オメガ冪@{ i } )
      (
        fun a_前者 : 三番目のブラウワー順序数@{ i } =>
        繰り返し適用の強上限@{ i } ( オメガ冪@{ i } ( 後者関数@{ i } a_前者 ) ) オメガ冪@{ i }
      )
      二番目の構築子@{ i }
.

Definition ヴェブレン階層@{ i | }
  : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    簡易版の場合分け@{ i }
      ( 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } )
      オメガ冪@{ i }
      (
        fun a_前者 : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数 =>
        簡易版の場合分け@{ i }
          三番目のブラウワー順序数@{ i }
          ( 繰り返し適用の強上限@{ i } ( a_前者 ( 後者関数@{ i } ゼロ@{ i } ) ) a_前者 )
          (
            fun b_前者 : 三番目のブラウワー順序数@{ i } =>
            繰り返し適用の強上限@{ i } ( a_前者 ( 後者関数@{ i } b_前者 ) ) a_前者
          )
          二番目の構築子@{ i }
      )
      (
        fun
          a_二番目の列
            : 二番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数
        =>
        簡易版の場合分け@{ i }
          三番目のブラウワー順序数@{ i }
          ( 二番目の構築子@{ i } ( fun 添字 : 二番目のブラウワー順序数@{ i } => a_二番目の列 添字 ゼロ@{ i } ) )
          (
            fun b_前者 : 三番目のブラウワー順序数@{ i } =>
            二番目の構築子@{ i }
              ( fun 添字 : 二番目のブラウワー順序数@{ i } => a_二番目の列 添字 ( 後者関数@{ i } b_前者 ) )
          )
          二番目の構築子@{ i }
      )
.

End 三番目のブラウワー順序数 .

Definition 三番目のブラウワー順序数@{ i | } : Type@{ i }
  := 三番目のブラウワー順序数.三番目のブラウワー順序数@{ i }
.

Module 四番目のブラウワー順序数 .

Inductive 四番目のブラウワー順序数@{ i | } : Type@{ i }
  :=
    ゼロ番目の構築子 : ( ゼロ番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数 ) -> 四番目のブラウワー順序数
    |
    一番目の構築子 : ( 一番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数 ) -> 四番目のブラウワー順序数
    |
    二番目の構築子 : ( 二番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数 ) -> 四番目のブラウワー順序数
    |
    三番目の構築子 : ( 三番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数 ) -> 四番目のブラウワー順序数
.

Definition 場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    ( ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    四番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 一番目の構築子の処理 : ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 二番目の構築子の処理 : ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 三番目の構築子の処理 : ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fix a ( 対象 : 四番目のブラウワー順序数@{ i } ) { struct 対象 } : 目標
      :=
        match
          対象
        with
          ゼロ番目の構築子 対象_ゼロ番目の列
          =>
          ゼロ番目の構築子の処理 ( fun 添字 : ゼロ番目のブラウワー順序数@{ i } => a ( 対象_ゼロ番目の列 添字 ) )
          |
          一番目の構築子 対象_一番目の列
          =>
          一番目の構築子の処理 ( fun 添字 : 一番目のブラウワー順序数@{ i } => a ( 対象_一番目の列 添字 ) )
          |
          二番目の構築子 対象_二番目の列
          =>
          二番目の構築子の処理 ( fun 添字 : 二番目のブラウワー順序数@{ i } => a ( 対象_二番目の列 添字 ) )
          |
          三番目の構築子 対象_三番目の列
          =>
          三番目の構築子の処理 ( fun 添字 : 三番目のブラウワー順序数@{ i } => a ( 対象_三番目の列 添字 ) )
        end
.

Definition 簡易版の場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    目標
    ->
    ( 目標 -> 目標 )
    ->
    ( ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    四番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : 目標 =>
    fun 一番目の構築子の処理 : 目標 -> 目標 =>
    fun 二番目の構築子の処理 : ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 三番目の構築子の処理 : ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    場合分け@{ i }
      目標
      ( fun 対象_ゼロ番目の列 : ゼロ番目のブラウワー順序数@{ i } -> 目標 => ゼロ番目の構築子の処理 )
      (
        fun 対象_一番目の列 : 一番目のブラウワー順序数@{ i } -> 目標 =>
        一番目の構築子の処理 ( 対象_一番目の列 一番目のブラウワー順序数.ゼロ@{ i } )
      )
      二番目の構築子の処理
      三番目の構築子の処理
.

Definition ゼロ番目のブラウワー順序数を埋め込む@{ i | }
  : ゼロ番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  := ゼロ番目のブラウワー順序数.場合分け@{ i } 四番目のブラウワー順序数@{ i }
.

Definition ゼロ@{ i | } : 四番目のブラウワー順序数@{ i }
  := ゼロ番目の構築子@{ i } ( ゼロ番目のブラウワー順序数.場合分け@{ i } 四番目のブラウワー順序数@{ i } )
.

Definition 一番目のブラウワー順序数を埋め込む@{ i | }
  : 一番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  := 一番目のブラウワー順序数.場合分け@{ i } 四番目のブラウワー順序数@{ i } ゼロ番目の構築子@{ i }
.

Definition 後者関数@{ i | } : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    fun x : 四番目のブラウワー順序数@{ i } =>
    一番目の構築子@{ i } ( 一番目のブラウワー順序数.簡易版の場合分け@{ i } 四番目のブラウワー順序数@{ i } x )
.

Definition 加算@{ i | }
  : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    fun x : 四番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      四番目のブラウワー順序数@{ i }
      x
      後者関数@{ i }
      二番目の構築子@{ i }
      三番目の構築子@{ i }
.

Definition 乗算@{ i | }
  : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    fun x : 四番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      四番目のブラウワー順序数@{ i }
      ゼロ@{ i }
      ( fun a_前者 : 四番目のブラウワー順序数@{ i } => 加算@{ i } a_前者 x )
      二番目の構築子@{ i }
      三番目の構築子@{ i }
.

Definition 冪乗@{ i | }
  : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    fun x : 四番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      四番目のブラウワー順序数@{ i }
      ( 後者関数@{ i } ゼロ@{ i } )
      ( fun a_前者 : 四番目のブラウワー順序数@{ i } => 乗算@{ i } a_前者 x )
      二番目の構築子@{ i }
      三番目の構築子@{ i }
.

Definition 二番目のブラウワー順序数を埋め込む@{ i | }
  : 二番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    二番目のブラウワー順序数.場合分け@{ i }
      四番目のブラウワー順序数@{ i }
      ゼロ番目の構築子@{ i }
      一番目の構築子@{ i }
.

Definition 繰り返し適用の強上限@{ i | }
  :
    四番目のブラウワー順序数@{ i }
    ->
    ( 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } )
    ->
    四番目のブラウワー順序数@{ i }
  :=
    fun x : 四番目のブラウワー順序数@{ i } =>
    fun f : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } =>
    二番目の構築子@{ i } ( 二番目のブラウワー順序数.簡易版の場合分け@{ i } 四番目のブラウワー順序数@{ i } x f )
.

Definition オメガ@{ i | } : 四番目のブラウワー順序数@{ i }
  := 繰り返し適用の強上限@{ i } ( 後者関数@{ i } ( 後者関数@{ i } ゼロ@{ i } ) ) 後者関数@{ i }
.

Definition オメガ冪@{ i | } : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  := 冪乗@{ i } オメガ@{ i }
.

Definition エプシロン数@{ i | } : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    簡易版の場合分け@{ i }
      四番目のブラウワー順序数@{ i }
      ( 繰り返し適用の強上限@{ i } オメガ@{ i } オメガ冪@{ i } )
      (
        fun a_前者 : 四番目のブラウワー順序数@{ i } =>
        繰り返し適用の強上限@{ i } ( オメガ冪@{ i } ( 後者関数@{ i } a_前者 ) ) オメガ冪@{ i }
      )
      二番目の構築子@{ i }
      三番目の構築子@{ i }
.

Definition ヴェブレン階層@{ i | }
  : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    簡易版の場合分け@{ i }
      ( 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } )
      オメガ冪@{ i }
      (
        fun a_前者 : 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数 =>
        簡易版の場合分け@{ i }
          四番目のブラウワー順序数@{ i }
          ( 繰り返し適用の強上限@{ i } ( a_前者 ( 後者関数@{ i } ゼロ@{ i } ) ) a_前者 )
          (
            fun b_前者 : 四番目のブラウワー順序数@{ i } =>
            繰り返し適用の強上限@{ i } ( a_前者 ( 後者関数@{ i } b_前者 ) ) a_前者
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
      )
      (
        fun
          a_二番目の列
            : 二番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数
        =>
        簡易版の場合分け@{ i }
          四番目のブラウワー順序数@{ i }
          ( 二番目の構築子@{ i } ( fun 添字 : 二番目のブラウワー順序数@{ i } => a_二番目の列 添字 ゼロ@{ i } ) )
          (
            fun b_前者 : 四番目のブラウワー順序数@{ i } =>
            二番目の構築子@{ i }
              ( fun 添字 : 二番目のブラウワー順序数@{ i } => a_二番目の列 添字 ( 後者関数@{ i } b_前者 ) )
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
      )
      (
        fun
          a_三番目の列
            : 三番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数
        =>
        簡易版の場合分け@{ i }
          四番目のブラウワー順序数@{ i }
          ( 三番目の構築子@{ i } ( fun 添字 : 三番目のブラウワー順序数@{ i } => a_三番目の列 添字 ゼロ@{ i } ) )
          (
            fun b_前者 : 四番目のブラウワー順序数@{ i } =>
            三番目の構築子@{ i }
              ( fun 添字 : 三番目のブラウワー順序数@{ i } => a_三番目の列 添字 ( 後者関数@{ i } b_前者 ) )
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
      )
.

Definition 三番目のブラウワー順序数を埋め込む@{ i | }
  : 三番目のブラウワー順序数@{ i } -> 四番目のブラウワー順序数@{ i }
  :=
    三番目のブラウワー順序数.場合分け@{ i }
      四番目のブラウワー順序数@{ i }
      ゼロ番目の構築子@{ i }
      一番目の構築子@{ i }
      二番目の構築子@{ i }
.

Definition 一番目のオメガ@{ i | } : 四番目のブラウワー順序数@{ i }
  := 三番目の構築子@{ i } 三番目のブラウワー順序数を埋め込む@{ i }
.

End 四番目のブラウワー順序数 .

Definition 四番目のブラウワー順序数@{ i | } : Type@{ i }
  := 四番目のブラウワー順序数.四番目のブラウワー順序数@{ i }
.

Module 五番目のブラウワー順序数 .

Inductive 五番目のブラウワー順序数@{ i | } : Type@{ i }
  :=
    ゼロ番目の構築子 : ( ゼロ番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数 ) -> 五番目のブラウワー順序数
    |
    一番目の構築子 : ( 一番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数 ) -> 五番目のブラウワー順序数
    |
    二番目の構築子 : ( 二番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数 ) -> 五番目のブラウワー順序数
    |
    三番目の構築子 : ( 三番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数 ) -> 五番目のブラウワー順序数
    |
    四番目の構築子 : ( 四番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数 ) -> 五番目のブラウワー順序数
.

Definition 場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    ( ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 四番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    五番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : ( ゼロ番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 一番目の構築子の処理 : ( 一番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 二番目の構築子の処理 : ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 三番目の構築子の処理 : ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 四番目の構築子の処理 : ( 四番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fix a ( 対象 : 五番目のブラウワー順序数@{ i } ) { struct 対象 } : 目標
      :=
        match
          対象
        with
          ゼロ番目の構築子 対象_ゼロ番目の列
          =>
          ゼロ番目の構築子の処理 ( fun 添字 : ゼロ番目のブラウワー順序数@{ i } => a ( 対象_ゼロ番目の列 添字 ) )
          |
          一番目の構築子 対象_一番目の列
          =>
          一番目の構築子の処理 ( fun 添字 : 一番目のブラウワー順序数@{ i } => a ( 対象_一番目の列 添字 ) )
          |
          二番目の構築子 対象_二番目の列
          =>
          二番目の構築子の処理 ( fun 添字 : 二番目のブラウワー順序数@{ i } => a ( 対象_二番目の列 添字 ) )
          |
          三番目の構築子 対象_三番目の列
          =>
          三番目の構築子の処理 ( fun 添字 : 三番目のブラウワー順序数@{ i } => a ( 対象_三番目の列 添字 ) )
          |
          四番目の構築子 対象_四番目の列
          =>
          四番目の構築子の処理 ( fun 添字 : 四番目のブラウワー順序数@{ i } => a ( 対象_四番目の列 添字 ) )
        end
.

Definition 簡易版の場合分け@{ i | }
  :
    forall 目標 : Type@{ i } ,
    目標
    ->
    ( 目標 -> 目標 )
    ->
    ( ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    ( ( 四番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 )
    ->
    五番目のブラウワー順序数@{ i }
    ->
    目標
  :=
    fun 目標 : Type@{ i } =>
    fun ゼロ番目の構築子の処理 : 目標 =>
    fun 一番目の構築子の処理 : 目標 -> 目標 =>
    fun 二番目の構築子の処理 : ( 二番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 三番目の構築子の処理 : ( 三番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    fun 四番目の構築子の処理 : ( 四番目のブラウワー順序数@{ i } -> 目標 ) -> 目標 =>
    場合分け@{ i }
      目標
      ( fun 対象_ゼロ番目の列 : ゼロ番目のブラウワー順序数@{ i } -> 目標 => ゼロ番目の構築子の処理 )
      (
        fun 対象_一番目の列 : 一番目のブラウワー順序数@{ i } -> 目標 =>
        一番目の構築子の処理 ( 対象_一番目の列 一番目のブラウワー順序数.ゼロ@{ i } )
      )
      二番目の構築子の処理
      三番目の構築子の処理
      四番目の構築子の処理
.

Definition ゼロ番目のブラウワー順序数を埋め込む@{ i | }
  : ゼロ番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  := ゼロ番目のブラウワー順序数.場合分け@{ i } 五番目のブラウワー順序数@{ i }
.

Definition ゼロ@{ i | } : 五番目のブラウワー順序数@{ i }
  := ゼロ番目の構築子@{ i } ( ゼロ番目のブラウワー順序数.場合分け@{ i } 五番目のブラウワー順序数@{ i } )
.

Definition 一番目のブラウワー順序数を埋め込む@{ i | }
  : 一番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  := 一番目のブラウワー順序数.場合分け@{ i } 五番目のブラウワー順序数@{ i } ゼロ番目の構築子@{ i }
.

Definition 後者関数@{ i | } : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    fun x : 五番目のブラウワー順序数@{ i } =>
    一番目の構築子@{ i } ( 一番目のブラウワー順序数.簡易版の場合分け@{ i } 五番目のブラウワー順序数@{ i } x )
.

Definition 加算@{ i | }
  : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    fun x : 五番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      x
      後者関数@{ i }
      二番目の構築子@{ i }
      三番目の構築子@{ i }
      四番目の構築子@{ i }
.

Definition 乗算@{ i | }
  : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    fun x : 五番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      ゼロ@{ i }
      ( fun a_前者 : 五番目のブラウワー順序数@{ i } => 加算@{ i } a_前者 x )
      二番目の構築子@{ i }
      三番目の構築子@{ i }
      四番目の構築子@{ i }
.

Definition 冪乗@{ i | }
  : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    fun x : 五番目のブラウワー順序数@{ i } =>
    簡易版の場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      ( 後者関数@{ i } ゼロ@{ i } )
      ( fun a_前者 : 五番目のブラウワー順序数@{ i } => 乗算@{ i } a_前者 x )
      二番目の構築子@{ i }
      三番目の構築子@{ i }
      四番目の構築子@{ i }
.

Definition 二番目のブラウワー順序数を埋め込む@{ i | }
  : 二番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    二番目のブラウワー順序数.場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      ゼロ番目の構築子@{ i }
      一番目の構築子@{ i }
.

Definition 繰り返し適用の強上限@{ i | }
  :
    五番目のブラウワー順序数@{ i }
    ->
    ( 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } )
    ->
    五番目のブラウワー順序数@{ i }
  :=
    fun x : 五番目のブラウワー順序数@{ i } =>
    fun f : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } =>
    二番目の構築子@{ i } ( 二番目のブラウワー順序数.簡易版の場合分け@{ i } 五番目のブラウワー順序数@{ i } x f )
.

Definition オメガ@{ i | } : 五番目のブラウワー順序数@{ i }
  := 繰り返し適用の強上限@{ i } ( 後者関数@{ i } ( 後者関数@{ i } ゼロ@{ i } ) ) 後者関数@{ i }
.

Definition オメガ冪@{ i | } : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  := 冪乗@{ i } オメガ@{ i }
.

Definition エプシロン数@{ i | } : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    簡易版の場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      ( 繰り返し適用の強上限@{ i } オメガ@{ i } オメガ冪@{ i } )
      (
        fun a_前者 : 五番目のブラウワー順序数@{ i } =>
        繰り返し適用の強上限@{ i } ( オメガ冪@{ i } ( 後者関数@{ i } a_前者 ) ) オメガ冪@{ i }
      )
      二番目の構築子@{ i }
      三番目の構築子@{ i }
      四番目の構築子@{ i }
.

Definition ヴェブレン階層@{ i | }
  : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    簡易版の場合分け@{ i }
      ( 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } )
      オメガ冪@{ i }
      (
        fun a_前者 : 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数 =>
        簡易版の場合分け@{ i }
          五番目のブラウワー順序数@{ i }
          ( 繰り返し適用の強上限@{ i } ( a_前者 ( 後者関数@{ i } ゼロ@{ i } ) ) a_前者 )
          (
            fun b_前者 : 五番目のブラウワー順序数@{ i } =>
            繰り返し適用の強上限@{ i } ( a_前者 ( 後者関数@{ i } b_前者 ) ) a_前者
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
          四番目の構築子@{ i }
      )
      (
        fun
          a_二番目の列
            : 二番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数
        =>
        簡易版の場合分け@{ i }
          五番目のブラウワー順序数@{ i }
          ( 二番目の構築子@{ i } ( fun 添字 : 二番目のブラウワー順序数@{ i } => a_二番目の列 添字 ゼロ@{ i } ) )
          (
            fun b_前者 : 五番目のブラウワー順序数@{ i } =>
            二番目の構築子@{ i }
              ( fun 添字 : 二番目のブラウワー順序数@{ i } => a_二番目の列 添字 ( 後者関数@{ i } b_前者 ) )
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
          四番目の構築子@{ i }
      )
      (
        fun
          a_三番目の列
            : 三番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数
        =>
        簡易版の場合分け@{ i }
          五番目のブラウワー順序数@{ i }
          ( 三番目の構築子@{ i } ( fun 添字 : 三番目のブラウワー順序数@{ i } => a_三番目の列 添字 ゼロ@{ i } ) )
          (
            fun b_前者 : 五番目のブラウワー順序数@{ i } =>
            三番目の構築子@{ i }
              ( fun 添字 : 三番目のブラウワー順序数@{ i } => a_三番目の列 添字 ( 後者関数@{ i } b_前者 ) )
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
          四番目の構築子@{ i }
      )
      (
        fun
          a_四番目の列
            : 四番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数
        =>
        簡易版の場合分け@{ i }
          五番目のブラウワー順序数@{ i }
          ( 四番目の構築子@{ i } ( fun 添字 : 四番目のブラウワー順序数@{ i } => a_四番目の列 添字 ゼロ@{ i } ) )
          (
            fun b_前者 : 五番目のブラウワー順序数@{ i } =>
            四番目の構築子@{ i }
              ( fun 添字 : 四番目のブラウワー順序数@{ i } => a_四番目の列 添字 ( 後者関数@{ i } b_前者 ) )
          )
          二番目の構築子@{ i }
          三番目の構築子@{ i }
          四番目の構築子@{ i }
      )
.

Definition 三番目のブラウワー順序数を埋め込む@{ i | }
  : 三番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    三番目のブラウワー順序数.場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      ゼロ番目の構築子@{ i }
      一番目の構築子@{ i }
      二番目の構築子@{ i }
.

Definition 一番目のオメガ@{ i | } : 五番目のブラウワー順序数@{ i }
  := 三番目の構築子@{ i } 三番目のブラウワー順序数を埋め込む@{ i }
.

Definition 四番目のブラウワー順序数を埋め込む@{ i | }
  : 四番目のブラウワー順序数@{ i } -> 五番目のブラウワー順序数@{ i }
  :=
    四番目のブラウワー順序数.場合分け@{ i }
      五番目のブラウワー順序数@{ i }
      ゼロ番目の構築子@{ i }
      一番目の構築子@{ i }
      二番目の構築子@{ i }
      三番目の構築子@{ i }
.

Definition 二番目のオメガ@{ i | } : 五番目のブラウワー順序数@{ i }
  := 四番目の構築子@{ i } 四番目のブラウワー順序数を埋め込む@{ i }
.

End 五番目のブラウワー順序数 .

Definition 五番目のブラウワー順序数@{ i | } : Type@{ i }
  := 五番目のブラウワー順序数.五番目のブラウワー順序数@{ i }
.

Module 順序数崩壊関数その一 .

Definition 順序数崩壊関数@{ i | } : 四番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i }
  :=
    四番目のブラウワー順序数.簡易版の場合分け@{ i }
      三番目のブラウワー順序数@{ i }
      (
        三番目のブラウワー順序数.繰り返し適用の強上限@{ i }
          三番目のブラウワー順序数.オメガ@{ i }
          (
            fun y : 三番目のブラウワー順序数@{ i } =>
            三番目のブラウワー順序数.ヴェブレン階層@{ i } y 三番目のブラウワー順序数.ゼロ@{ i }
          )
      )
      (
        fun a_前者 : 三番目のブラウワー順序数@{ i } =>
        三番目のブラウワー順序数.繰り返し適用の強上限@{ i }
          (
            三番目のブラウワー順序数.ヴェブレン階層@{ i }
              ( 三番目のブラウワー順序数.後者関数@{ i } a_前者 )
              三番目のブラウワー順序数.ゼロ@{ i }
          )
          (
            fun y : 三番目のブラウワー順序数@{ i } =>
            三番目のブラウワー順序数.ヴェブレン階層@{ i } y 三番目のブラウワー順序数.ゼロ@{ i }
          )
      )
      三番目のブラウワー順序数.二番目の構築子@{ i }
      (
        fun a_三番目の列 : 三番目のブラウワー順序数@{ i } -> 三番目のブラウワー順序数@{ i } =>
        三番目のブラウワー順序数.繰り返し適用の強上限@{ i }
          ( a_三番目の列 三番目のブラウワー順序数.オメガ@{ i } )
          a_三番目の列
      )
.

End 順序数崩壊関数その一 .

Module 順序数崩壊関数その二 .

Inductive 順序数崩壊関数の添字@{ i | } : Type@{ i }
  := 一番目のオメガと等しい添字 : 順序数崩壊関数の添字 | 二番目のオメガと等しい添字 : 順序数崩壊関数の添字
.

Definition 順序数崩壊関数の終域@{ i | } : 順序数崩壊関数の添字@{ i } -> Type@{ i }
  :=
    fun 添字 : 順序数崩壊関数の添字@{ i } =>
    match
      添字
    with
      一番目のオメガと等しい添字 => 三番目のブラウワー順序数@{ i }
      |
      二番目のオメガと等しい添字 => 四番目のブラウワー順序数@{ i }
    end
.

Definition 順序数崩壊関数@{ i | }
  : forall 添字 : 順序数崩壊関数の添字@{ i } , 五番目のブラウワー順序数@{ i } -> 順序数崩壊関数の終域@{ i } 添字
  :=
    fix a ( 添字 : 順序数崩壊関数の添字@{ i } ) ( x : 五番目のブラウワー順序数@{ i } ) { struct x }
      : 順序数崩壊関数の終域@{ i } 添字
      :=
        match
          x
        with
          五番目のブラウワー順序数.ゼロ番目の構築子 x_ゼロ番目の列
          =>
            match
              添字
            as
              添字_
            return
              順序数崩壊関数の終域@{ i } 添字_
            with
              一番目のオメガと等しい添字 => 三番目のブラウワー順序数.後者関数@{ i } 三番目のブラウワー順序数.ゼロ@{ i }
              |
              二番目のオメガと等しい添字 => 四番目のブラウワー順序数.一番目のオメガ@{ i }
            end
          |
          五番目のブラウワー順序数.一番目の構築子 x_一番目の列
          =>
            match
              添字
            as
              添字_
            return
              順序数崩壊関数の終域@{ i } 添字_
            with
              一番目のオメガと等しい添字
              =>
              三番目のブラウワー順序数.乗算@{ i }
                ( a 一番目のオメガと等しい添字@{ i } ( x_一番目の列 一番目のブラウワー順序数.ゼロ@{ i } ) )
                三番目のブラウワー順序数.オメガ@{ i }
              |
              二番目のオメガと等しい添字
              =>
              四番目のブラウワー順序数.乗算@{ i }
                ( a 二番目のオメガと等しい添字@{ i } ( x_一番目の列 一番目のブラウワー順序数.ゼロ@{ i } ) )
                四番目のブラウワー順序数.オメガ@{ i }
            end
          |
          五番目のブラウワー順序数.二番目の構築子 x_二番目の列
          =>
            match
              添字
            as
              添字_
            return
              順序数崩壊関数の終域@{ i } 添字_
            with
              一番目のオメガと等しい添字
              =>
              三番目のブラウワー順序数.二番目の構築子@{ i }
                ( fun y : 二番目のブラウワー順序数@{ i } => a 一番目のオメガと等しい添字@{ i } ( x_二番目の列 y ) )
              |
              二番目のオメガと等しい添字
              =>
              四番目のブラウワー順序数.二番目の構築子@{ i }
                ( fun y : 二番目のブラウワー順序数@{ i } => a 二番目のオメガと等しい添字@{ i } ( x_二番目の列 y ) )
            end
          |
          五番目のブラウワー順序数.三番目の構築子 x_三番目の列
          =>
            match
              添字
            as
              添字_
            return
              順序数崩壊関数の終域@{ i } 添字_
            with
              一番目のオメガと等しい添字
              =>
              三番目のブラウワー順序数.繰り返し適用の強上限@{ i }
                ( a 一番目のオメガと等しい添字@{ i } ( x_三番目の列 三番目のブラウワー順序数.オメガ@{ i } ) )
                ( fun y : 三番目のブラウワー順序数@{ i } => a 一番目のオメガと等しい添字@{ i } ( x_三番目の列 y ) )
              |
              二番目のオメガと等しい添字
              =>
              四番目のブラウワー順序数.三番目の構築子@{ i }
                ( fun y : 三番目のブラウワー順序数@{ i } => a 二番目のオメガと等しい添字@{ i } ( x_三番目の列 y ) )
            end
          |
          五番目のブラウワー順序数.四番目の構築子 x_四番目の列
          =>
            match
              添字
            as
              添字_
            return
              順序数崩壊関数の終域@{ i } 添字_
            with
              一番目のオメガと等しい添字
              =>
              a
                一番目のオメガと等しい添字@{ i }
                (
                  x_四番目の列
                    (
                      四番目のブラウワー順序数.繰り返し適用の強上限@{ i }
                        (
                          a
                            二番目のオメガと等しい添字@{ i }
                            ( x_四番目の列 四番目のブラウワー順序数.オメガ@{ i } )
                        )
                        (
                          fun y : 四番目のブラウワー順序数@{ i } =>
                          a 二番目のオメガと等しい添字@{ i } ( x_四番目の列 y )
                        )
                    )
                )
              |
              二番目のオメガと等しい添字
              =>
              四番目のブラウワー順序数.繰り返し適用の強上限@{ i }
                ( a 二番目のオメガと等しい添字@{ i } ( x_四番目の列 四番目のブラウワー順序数.オメガ@{ i } ) )
                ( fun y : 四番目のブラウワー順序数@{ i } => a 二番目のオメガと等しい添字@{ i } ( x_四番目の列 y ) )
            end
          end
.

End 順序数崩壊関数その二 .

End 複数の段階を有するブラウワー順序数 .
